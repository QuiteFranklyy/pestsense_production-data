{
    "device": "DESKTOP",
    "widgets": {
      "productsTable": {
        "t": "Table",
        "lX": 11,
        "lY": 137,
        "sX": 4.54,
        "sY": 5,
        "s": "Manage Products",
        "ps": {
          "enabled": "true",
          "scalingType": "OK",
          "width": "41.12%",
          "height": "41.26%",
          "x": "0.92%",
          "y": "11.55%"
        },
        "ver": "190104c210519",
        "dis": false,
        "tt": "",
        "a": {
          "text color": "#000000",
          "row color": "#000000",
          "columns": "name,expiry,weight per block",
          "selectable": "multi",
          "display header": "true",
          "title": "All Products",
          "form id": "products",
          "form key": "all",
          "enable search": "true",
          "colWidths": ""
        },
        "ev": {
          "clientEvents": {
            "inputEvents": {
              "New Event #1": {
                "channel": "masterDelRows/delete all rows",
                "event": "delete all rows",
                "important": "false"
              }
            },
            "outputEvents": {}
          }
        }
      },
      "companyProductsTable": {
        "t": "Table",
        "lX": 580,
        "lY": 137,
        "sX": 5.35,
        "sY": 4.97,
        "s": "Manage Products",
        "ps": {
          "enabled": "true",
          "scalingType": "OK",
          "width": "48.47%",
          "height": "41.08%",
          "x": "49.9%",
          "y": "11.55%"
        },
        "ver": "190104c210519",
        "dis": false,
        "tt": "",
        "a": {
          "columns": "name,created on,created by,expiry,weight per block",
          "selectable": "multi + single",
          "text color": "#000000",
          "row color": "#000000",
          "display header": "true",
          "title": "Company Products",
          "form id": "products",
          "form key": "company",
          "enable search": "true",
          "colWidths": ""
        },
        "ev": {
          "clientEvents": {
            "inputEvents": {
              "Delete Rows": {
                "channel": "compDelRows/delete all rows",
                "event": "delete all rows",
                "important": "false"
              }
            },
            "outputEvents": {
              "Select Row": {
                "channel": "selectCompRow/receive value",
                "event": "selected",
                "trigger": "selected",
                "important": "false"
              }
            }
          }
        }
      },
      "Scripting#6": {
        "t": "Scripting",
        "lX": 80,
        "lY": 805,
        "sX": 1,
        "sY": 1,
        "s": "Manage Products",
        "ps": {
          "enabled": "false",
          "scalingType": "OK",
          "width": "9.07%",
          "height": "8.26%",
          "x": "7.25%",
          "y": "66.47%"
        },
        "ver": "200124c210519",
        "dis": false,
        "tt": "",
        "a": {
          "script type": "javascript",
          "file name": "../../js/settings/manage products/manageProducts.js",
          "code editor": "//# sourceURL=dynamic-script.js\n/**\n * Description: \n * Create Author/Date: \n * Modified Author/Date Date: \n * Version: \n */\n\n/**\n * Initialise script state (run once at startup)\n */\n var productCollection;\n var compProductCollection;\n var currentCompany;\n \n const productsTable = Script.getWidget(\"productsTable\");\n\n const compProductsTable = Script.getWidget(\"companyProductsTable\");\n const compDropdown = Script.getWidget(\"companyDropdown\");\n\nScript.on(\"init\", function() {\n\tClient.setScreenVisible(\"Edit Product\", false);\n\tClient.setScreenVisible(\"Edit User Role\", false);\n\tClient.setScreenVisible(\"Edit Error Codes\", false);\n\tClient.setScreenVisible(\"Edit Company\", false);\n});\n \n Script.on('load', function() {\n\t Database.readRecords(\"rodent\", \"Companies\", function(eventData) {\n\t\t let companyCollection = SensaCollection.load(eventData.value);\n \n\t\t Database.readRecords(\"rodent\", \"UserRoles\", function(eventData) {\n\t\t\t let userCollection = SensaCollection.load(eventData.value);\n\t\t\t let filteredUsers = userCollection.query((record, pk) => {\n\t\t\t\t if (record['User'] == Client.getUser()) {\n\t\t\t\t\t return true;\n\t\t\t\t }\n\t\t\t });\n\t\t\t var userCompanies = filteredUsers.getColumn(\"CompanyId\");\n \n\t\t\t let filteredCompanies = companyCollection.query((record, pk) => {\n\t\t\t\t if (userCompanies.includes(pk)) {\n\t\t\t\t\t return true;\n\t\t\t\t }\n\t\t\t });\n \n\t\t\t let compNames = filteredCompanies.getColumn(\"Name\");\n\t\t\t let compLoc = filteredCompanies.getColumn(\"Address\");\n\t\t\t let compIds = filteredCompanies.getColumn(\"Id\");\n\t \n\t\t\t // Get from state if coming back from editing/creating\n\t\t\t currentCompany = Script.getState(\"currentCompany\");\n\t\t\t if (currentCompany == null) {\n\t\t\t\t currentCompany = compIds[0];\n\t\t\t }\n\t\t\t \n \n\t\t\t let compObj = {};\n\t\t\t compIds.map((comp, idx) => {\n\t\t\t\t compObj[comp] = compNames[idx] + \", \" + compLoc[idx];\n\t\t\t });\n \n\t\t\t Object.keys(compObj).forEach((comp, idx) => {\n\t\t\t\t filteredCompanies.set({\"Id\": comp, \"Name\": compObj[comp]});\n\t\t\t });\n \n\t\t\t filteredCompanies.renameColumn(\"Name\", \"text\");\n\t\t\t filteredCompanies.renameColumn(\"Id\", \"value\");\n \n\t\t\t compDropdown.receiveTextValues(filteredCompanies);\n\t\t\t compDropdown.receiveValue(compObj[currentCompany]);\n\t\t\t \n\t\t\t Database.readRecords(\"rodent\", \"CompanyProducts\", function(eventData) {\n\t\t\t\t compProductCollection = SensaCollection.load(eventData.value);\n\t\t\t\t updateTable();\n\t\t\t });\n\t\t });\n\t });\n\t \n\t Database.readRecords(\"rodent\", \"Products\", function(eventData) {\n\t\t productCollection = SensaCollection.load(eventData.value);\n\t\t let filteredComps = productCollection.query((record, pk) => {\n\t\t\t if (record['Status'] == '1'){\n\t\t\t\t return true;\n\t\t\t }\n\t\t });\n\t\t ClientEvents.publish(\"masterDelRows\", \"\");\n\t\t productsTable.receiveValue(filteredComps);\n\t });\n });\n \n ClientEvents.subscribe(\"addCompanyProducts\", addProductToCompany);\n ClientEvents.subscribe(\"removeCompanyProducts\", removeProductFromCompany);\n ClientEvents.subscribe(\"compSelected\", changeCompany);\n ClientEvents.subscribe(\"selectCompRow\", editProduct);\n ClientEvents.subscribe(\"newProdIcon\", createNewProduct);\n \n function addProductToCompany() {\n\t var formData = Script.getFormByKey(\"products\");\n\t var compData = formData.all;\n\t compData.addColumn(\"companyid\");\n\t \n\t var dbReq = {};\n\t var compProdCount = Object.keys(compProductCollection.data).length;\n\t let today = new Date();\n\t today = Utils.formatDate(today, \"dd/MM/yyyy HH:mm\", false);\n\t \n\t compData.forEach(function(kvpair, pk) {\n\t\t var prodObj = {};\n\t\t // Check if product already exists with status = 0\n\t\t let matchingProd = compProductCollection.query((record, pk) => {\n\t\t\t if ((record['CompanyId'] == Script.getFormByKey(\"products\").compDrop) &&\n\t\t\t\t (record['Name'] == kvpair.name) &&\n\t\t\t\t (record['Expiry'] == kvpair.expiry) &&\n\t\t\t\t (record['WeightPerBlock'] == kvpair.weightperblock) &&\n\t\t\t\t (record['Status'] == '0')) {\n\t\t\t\t return true;\n\t\t\t }\n\t\t });\n\t\t if (Object.keys(matchingProd.data).length > 0) {\n\t\t\t // found match, override\n\t\t\t prodObj.Id = Object.keys(matchingProd.data)[0];\n\t\t\t \n\t\t } else {\n\t\t\t prodObj.Id = `${++compProdCount}`;\n\t\t }\n\t\t prodObj.Name = kvpair.name;\n\t\t prodObj.Owner = kvpair.owner;\n\t\t prodObj.Status = kvpair.status;\n\t\t prodObj.CreatedOn = today;\n\t\t prodObj.UpdatedOn = today;\n\t\t prodObj.CreatedBy = Client.getUser();\n\t\t prodObj.UpdatedBy = Client.getUser();\n\t\t prodObj.CompanyId = formData.compDrop;\n\t\t prodObj.Expiry = kvpair.expiry;\n\t\t prodObj.LowerThreshold = kvpair.lowerthreshold;\n\t\t prodObj.UpperThreshold = kvpair.upperthreshold;\n\t\t prodObj.WeightPerBlock = kvpair.weightperblock;\n\t\t dbReq[prodObj.Id] = prodObj;\n\t });\n\t Database.saveRecord(\"rodent\", \"CompanyProducts\", dbReq, () => {\n\t\t Database.readRecords(\"rodent\", \"CompanyProducts\", function(eventData) {\n\t\t\t compProductCollection = SensaCollection.load(eventData.value);\n\t\t\t updateTable();\n\t\t });\n\t });\n }\n \n function updateTable() {\n\t let filteredComps = compProductCollection.query((record, pk) => {\n\t\t if ((record['CompanyId'] == currentCompany) &&\n\t\t\t (record['Status'] == '1')){\n\t\t\t return true;\n\t\t }\n\t });\n \n\t ClientEvents.publish(\"compDelRows\", \"\");\n\t compProductsTable.receiveValue(filteredComps);\n }\n \n function removeProductFromCompany() {\n\t var formData = Script.getFormByKey(\"products\");\n\t var ids = formData.company.getColumn(\"id\");\n\t for (var i = 0; i < ids.length; i++) {\n\t\t compProductsTable.deleteRows(ids[i]);\n\t\t let req = {};\n\t\t req[{\"Id\": ids[i], \"Status\": \"0\"}] = {\"Id\": ids[i], \"Status\": \"0\"};\n\t\t Database.updateRecord(\"rodent\", \"CompanyProducts\", req);\n\t }\n }\n \n async function changeCompany(selected) {\n\t currentCompany = selected.value;\n\t \n\t Database.readRecords(\"rodent\", \"CompanyProducts\", function(eventData) {\n\t\t compProductCollection = SensaCollection.load(eventData.value);\n\t\t Script.setState(\"currentCompany\", currentCompany);\n\t\t updateTable();\n\t });\n }\n \n function editProduct(eventData) {\n\t Script.setState(\"compProductInfo\", eventData.value);\n\t Script.setState(\"modifyType\", \"edit\");\n\t Client.jumpToScreen(\"Edit Product\");\n }\n \n function createNewProduct(eventData) {\n\t Script.setState(\"modifyType\", \"add\");\n\t Script.setState(\"companyId\", currentCompany);\n\t Client.jumpToScreen(\"Edit Product\");\n }"
        },
        "ev": {}
      },
      "Icon#0": {
        "t": "Icon",
        "lX": 549,
        "lY": 643,
        "sX": 0.9,
        "sY": 0.9,
        "s": "Manage Products",
        "ps": {
          "enabled": "true",
          "scalingType": "NOHORIZ,NOVERT",
          "width": "",
          "height": "3.66%",
          "x": "49.9%",
          "y": "54.25%"
        },
        "ver": "200628c210519",
        "dis": false,
        "tt": "",
        "a": {
          "outline color": "no outline",
          "icon file": "plus-square"
        },
        "ev": {
          "clientEvents": {
            "outputEvents": {
              "New Event #1": {
                "channel": "newProdIcon/receive value",
                "event": "pressed",
                "trigger": "pressed",
                "important": "false"
              }
            }
          }
        }
      },
      "Label#1": {
        "t": "Label",
        "lX": 579,
        "lY": 652,
        "sX": 5.51,
        "sY": 1.96,
        "s": "Manage Products",
        "ps": {
          "enabled": "true",
          "scalingType": "OK",
          "width": "50%",
          "height": "4.05%",
          "x": "55.45%",
          "y": "54.62%"
        },
        "ver": "200124c210519",
        "dis": false,
        "tt": "",
        "a": {
          "font size": "25",
          "label text": "New Company Product"
        },
        "ev": {}
      },
      "Button#3": {
        "t": "Button",
        "lX": 498,
        "lY": 294,
        "sX": 0.46,
        "sY": 0.98,
        "s": "Manage Products",
        "ps": {
          "enabled": "true",
          "scalingType": "OK",
          "width": "4.2%",
          "height": "3.73%",
          "x": "43.9%",
          "y": "24.75%"
        },
        "ver": "190104c210519",
        "dis": false,
        "tt": "",
        "a": {
          "button name": ">>",
          "color": "grey"
        },
        "ev": {
          "clientEvents": {
            "outputEvents": {
              "New Event #1": {
                "channel": "addCompanyProducts/receive value",
                "event": "pressed",
                "trigger": "pressed",
                "important": "false"
              }
            }
          }
        }
      },
      "Button#4": {
        "t": "Button",
        "lX": 522,
        "lY": 391,
        "sX": 0.46,
        "sY": 0.98,
        "s": "Manage Products",
        "ps": {
          "enabled": "true",
          "scalingType": "OK",
          "width": "4.2%",
          "height": "3.73%",
          "x": "43.9%",
          "y": "32.92%"
        },
        "ver": "190104c210519",
        "dis": false,
        "tt": "",
        "a": {
          "button name": "<<",
          "color": "grey"
        },
        "ev": {
          "clientEvents": {
            "outputEvents": {
              "New Event #1": {
                "channel": "removeCompanyProducts/receive value",
                "event": "pressed",
                "trigger": "pressed",
                "important": "false"
              }
            }
          }
        }
      },
      "companyDropdown": {
        "t": "Dropdown",
        "lX": 1668,
        "lY": 78,
        "sX": 3.14,
        "sY": 1,
        "s": "Manage Products",
        "ps": {
          "enabled": "true",
          "scalingType": "NOVERT",
          "width": "28.49%",
          "height": "4.13%",
          "x": "70%",
          "y": "6.53%"
        },
        "ver": "190104c210519",
        "dis": false,
        "tt": "",
        "a": {
          "label text": "Company",
          "default options": "",
          "form id": "products",
          "form key": "compDrop"
        },
        "ev": {
          "clientEvents": {
            "outputEvents": {
              "New Event #1": {
                "channel": "compSelected/receive value",
                "event": "selected",
                "trigger": "selected",
                "important": "false"
              }
            }
          }
        }
      },
      "Scripting#8": {
        "t": "Scripting",
        "lX": 515,
        "lY": 375,
        "sX": 1,
        "sY": 1,
        "s": "Edit Product",
        "ps": {
          "enabled": "false",
          "scalingType": "OK",
          "width": "",
          "height": "",
          "x": "",
          "y": ""
        },
        "ver": "200124c210519",
        "dis": false,
        "tt": "",
        "a": {
          "script type": "javascript",
          "code editor": "//# sourceURL=dynamic-script.js\n/**\n * Description: \n * Create Author/Date: \n * Modified Author/Date Date: \n * Version: \n */\n\n/**\n * Initialise script state (run once at startup)\n */\nvar prodId;\nvar modifyType;\nconst prodFormContainer = Script.getWidget(\"productFormContainer\");\nconst prodSubmitButton = Script.getWidget(\"prodSubmitButton\");\n\nScript.on('load', function() {\n\tmodifyType = Script.getState(\"modifyType\");\n\tvar productData;\n\t\n\tif (modifyType.startsWith(\"add\")) {\n\t\tprodFormContainer.setTitle(\"New Product\");\n\t\treturn;\n    } else if (modifyType == \"edit\") {\n\t\tproductData = Script.getState(\"compProductInfo\");\n    } else if (modifyType == \"edit_master\") {\n\t\tproductData = Script.getState(\"productInfo\");\t   \n    }\n\tvar prodObj = {}\n\tprodId = productData.getColumn(\"id\")[0];\n\tprodObj.Name = productData.getColumn(\"name\");\n\tprodObj.Status = productData.getColumn(\"status\");\n\tprodObj.WeightPerBlock = productData.getColumn(\"weightperblock\");\n\tprodObj.Expiry = productData.getColumn(\"expiry\");\n\n\tScript.setForm(\"editProduct\", prodObj);\n\tprodFormContainer.setTitle(\"Edit Product\");\n});\n\nClientEvents.subscribe(\"finishEditProduct\", function() {\n\tswitch (modifyType) {\n\t\tcase 'edit':\n\t\t\thandleEdit();\n\t\t\tbreak;\n\t\tcase 'edit_master':\n\t\t\thandleEditMaster();\n\t\t\tbreak;\n\t\tcase 'add':\n\t\t\thandleCreate();\n\t\t\tbreak;\n\t\tcase 'add_master':\n\t\t\thandleCreateMaster();\n\t\t\tbreak;\n\t}\n});\n\nfunction handleEdit() {\n\tvar formObj = Script.getFormByKey(\"editProduct\");\n\tif (formObj == undefined) {\n\t\talert(\"Please fill out all required fields\");\n\t\treturn;\n\t}\n\t\t\n\tvar dbReq = {};\n\tvar companyProducts = Script.getState(\"companyProducts\");\n\tformObj.Id = prodId;\n\tformObj.Status = +formObj.Status;\n\tlet today = new Date();\n\ttoday = Utils.formatDate(today, \"dd/MM/yyyy HH:mm\", false);\n\tformObj.UpdatedOn = today;\n\tformObj.UpdatedBy = Client.getUser();\n\tdbReq[prodId] = formObj;\n\t\t\n\tDatabase.updateRecord(\"rodent\", \"CompanyProducts\", dbReq, () => {\n\t\t//Script.setState(\"currentCompany\", formObj.CompanyId);\n\t\tClient.jumpToScreen(\"Manage Products\");\n\t});\n}\n\nfunction handleEditMaster() {\n\tvar formObj = Script.getFormByKey(\"editProduct\");\n\tif (formObj == undefined) {\n\t\talert(\"Please fill out all required fields\");\n\t\treturn;\n\t}\n\t\t\n\tvar dbReq = {};\n\tformObj.Id = prodId;\n\tformObj.Status = +formObj.Status;\n\tlet today = new Date();\n\ttoday = Utils.formatDate(today, \"dd/MM/yyyy HH:mm\", false);\n\tformObj.UpdatedOn = today;\n\tformObj.UpdatedBy = Client.getUser();\n\tdbReq[prodId] = formObj;\n\t\t\n\tDatabase.updateRecord(\"rodent\", \"Products\", dbReq, () => {\n\t\tClient.jumpToScreen(\"Manage Master Products\");\n\t});\t\n}\n\nfunction handleCreate() {\n\tDatabase.readRecords(\"rodent\", \"CompanyProducts\", function(eventData) {\n\t\tvar compProductCollection = SensaCollection.load(eventData.value);\n\t\tvar formObj = Script.getFormByKey(\"editProduct\");\n\t\t\n\t\tif (formObj == undefined) {\n\t\t\talert(\"Please fill out all required fields\");\n\t\t\treturn;\n\t\t}\n\n\t\tvar dbReq = {};\n\t\tvar compProdCount = Object.keys(compProductCollection.data).length;\n\t\tformObj.Id = `${compProdCount + 1}`;\n\t\tformObj.Status = +formObj.Status;\n\n\t\tlet today = new Date();\n\t\ttoday = Utils.formatDate(today, \"dd/MM/yyyy HH:mm\", false);\n\t\tformObj.CreatedOn = today;\n\t\tformObj.UpdatedOn = today;\n\t\tformObj.Owner = Client.getUser();\n\t\tformObj.CreatedBy = Client.getUser();\n\t\tformObj.UpdatedBy = Client.getUser();\n\t\tformObj.CompanyId = Script.getState(\"companyId\");\n\t\tdbReq[compProdCount + 1] = formObj;\n\n\t\tDatabase.createRecords(\"rodent\", \"CompanyProducts\", dbReq, () => {\n\t\t\tScript.setState(\"currentCompany\", formObj.CompanyId);\n\t\t\tClient.jumpToScreen(\"Manage Products\");\n\t\t});\n\t});\n}\n\nfunction handleCreateMaster() {\n\tDatabase.readRecords(\"rodent\", \"Products\", function(eventData) {\n\t\tvar productCollection = SensaCollection.load(eventData.value);\n\t\tvar formObj = Script.getFormByKey(\"editProduct\");\n\t\t\n\t\tif (formObj == undefined) {\n\t\t\talert(\"Please fill out all required fields\");\n\t\t\treturn;\n\t\t}\n\n\t\tvar dbReq = {};\n\t\tvar compProdCount = Object.keys(productCollection.data).length;\n\t\tformObj.Id = `${compProdCount + 1}`;\n\t\tformObj.Status = +formObj.Status;\n\n\t\tlet today = new Date();\n\t\ttoday = Utils.formatDate(today, \"dd/MM/yyyy HH:mm\", false);\n\t\tformObj.CreatedOn = today;\n\t\tformObj.UpdatedOn = today;\n\t\tformObj.Owner = Client.getUser();\n\t\tformObj.CreatedBy = Client.getUser();\n\t\tformObj.UpdatedBy = Client.getUser();\n\t\tdbReq[compProdCount + 1] = formObj;\n\n\t\tDatabase.createRecords(\"rodent\", \"Products\", dbReq, () => {\n\t\t\tClient.jumpToScreen(\"Manage Master Products\");\n\t\t});\n\t});\n}"
        },
        "ev": {}
      },
      "Input#2": {
        "t": "Input",
        "lX": 145,
        "lY": 305,
        "sX": 2.75,
        "sY": 1,
        "s": "Edit Product",
        "ps": {
          "enabled": "false",
          "scalingType": "NOVERT",
          "width": "24.93%",
          "height": "4.38%",
          "x": "13.15%",
          "y": "25.19%"
        },
        "ver": "270520c210519",
        "dis": false,
        "tt": "",
        "a": {
          "label text": "Name",
          "color": "grey",
          "form id": "editProduct",
          "form key": "Name",
          "required": "true"
        },
        "ev": {}
      },
      "Input#4": {
        "t": "Input",
        "lX": 145,
        "lY": 370,
        "sX": 2.75,
        "sY": 1,
        "s": "Edit Product",
        "ps": {
          "enabled": "false",
          "scalingType": "NOVERT",
          "width": "24.93%",
          "height": "4.38%",
          "x": "13.15%",
          "y": "30.55%"
        },
        "ver": "270520c210519",
        "dis": false,
        "tt": "",
        "a": {
          "type": "number",
          "label text": "Weight Per Block",
          "color": "grey",
          "form id": "editProduct",
          "form key": "WeightPerBlock",
          "required": "true"
        },
        "ev": {}
      },
      "Input#5": {
        "t": "Input",
        "lX": 145,
        "lY": 435,
        "sX": 2.75,
        "sY": 1,
        "s": "Edit Product",
        "ps": {
          "enabled": "false",
          "scalingType": "NOVERT",
          "width": "24.93%",
          "height": "4.38%",
          "x": "13.24%",
          "y": "35.84%"
        },
        "ver": "270520c210519",
        "dis": false,
        "tt": "",
        "a": {
          "label text": "Expiry",
          "color": "grey",
          "type": "number",
          "form id": "editProduct",
          "form key": "Expiry",
          "required": "true"
        },
        "ev": {}
      },
      "Input#6": {
        "t": "Input",
        "lX": 135,
        "lY": 560,
        "sX": 1,
        "sY": 1,
        "s": "Edit Product",
        "ps": {
          "enabled": "false",
          "scalingType": "NOVERT",
          "width": "9.07%",
          "height": "4.38%",
          "x": "12.42%",
          "y": "46.33%"
        },
        "ver": "270520c210519",
        "dis": false,
        "tt": "",
        "a": {
          "type": "checkbox",
          "label text": "Enabled",
          "color": "grey",
          "checkbox label side": "right",
          "form id": "editProduct",
          "form key": "Status",
          "default value": "1"
        },
        "ev": {}
      },
      "productFormContainer": {
        "t": "Container",
        "lX": 130,
        "lY": 240,
        "sX": 2.95,
        "sY": 3.75,
        "s": "Edit Product",
        "ps": {
          "enabled": "false",
          "scalingType": "OK",
          "width": "26.75%",
          "height": "30.97%",
          "x": "11.88%",
          "y": "19.98%"
        },
        "ver": "190104c210519",
        "z": "100",
        "dis": false,
        "tt": "",
        "a": {
          "color": "grey",
          "title": "Edit Product"
        },
        "ev": {}
      },
      "prodSubmitButton": {
        "t": "Button",
        "lX": 315,
        "lY": 555,
        "sX": 1,
        "sY": 1,
        "s": "Edit Product",
        "ps": {
          "enabled": "false",
          "scalingType": "OK",
          "width": "4.2%",
          "height": "3.8%",
          "x": "13.22%",
          "y": "45.79%"
        },
        "ver": "190104c210519",
        "dis": false,
        "tt": "",
        "a": {
          "color": "orange strong",
          "button name": "Submit"
        },
        "ev": {
          "clientEvents": {
            "inputEvents": {},
            "outputEvents": {
              "submitEdit": {
                "channel": "finishEditProduct/receive value",
                "event": "pressed",
                "trigger": "pressed",
                "important": "false"
              }
            }
          }
        }
      },
      "Scripting#9": {
        "t": "Scripting",
        "lX": 55,
        "lY": 885,
        "sX": 1,
        "sY": 1,
        "s": "Manage Master Products",
        "ps": {
          "enabled": "false",
          "scalingType": "OK",
          "width": "9.07%",
          "height": "8.26%",
          "x": "4.99%",
          "y": "73.08%"
        },
        "ver": "200124c210519",
        "dis": false,
        "tt": "",
        "a": {
          "script type": "javascript",
          "code editor": "//# sourceURL=dynamic-script.js\n/**\n * Description: \n * Create Author/Date: \n * Modified Author/Date Date: \n * Version: \n */\n\n/**\n * Initialise script state (run once at startup)\n */\nvar productCollection;\n// Default\nvar status = \"Show Active\";\n\nconst productsTable = Script.getWidget(\"masterProductsTable\");\n\nScript.on('load', function() {\n\t\n\tDatabase.readRecords(\"rodent\", \"Products\", function(eventData) {\n\t\tproductCollection = SensaCollection.load(eventData.value);\n\t\tupdateTable();\n\t});\n});\n\nClientEvents.subscribe(\"productSelected\", editProduct);\nClientEvents.subscribe(\"removeMasterProducts\", removeProductFromCompany);\nClientEvents.subscribe(\"addNewMasterProduct\", createNewProduct);\nClientEvents.subscribe(\"changeActive\", (eventData) => {\n\tstatus = eventData.value; \n\tDatabase.readRecords(\"rodent\", \"Products\", function(eventData) {\n\t\tproductCollection = SensaCollection.load(eventData.value);\n\t\tupdateTable();\n\t});\n\tif (status !== \"Show Active\") {\n\t\t// Do not attempt to delete inactive elements\n\t\tScript.disableWidget(\"deleteMasterProdIcon\");\n\t\tScript.disableWidget(\"addMasterProdIcon\");\n\t} else {\n\t\t// Re-enable widgets if disabled before\n\t\tScript.enableWidget(\"deleteMasterProdIcon\");\n\t\tScript.enableWidget(\"addMasterProdIcon\");\n\t}\n});\n\nfunction editProduct(eventData) {\n\tScript.setState(\"productInfo\", eventData.value);\n\tScript.setState(\"modifyType\", \"edit_master\");\n\tClient.jumpToScreen(\"Edit Product\");\n}\n\nfunction updateTable() {\n\t//status = Script.getFormByKey(\"master\").activeSelection == \"Show Active\" ? '1' : '0';\n\tlet filteredComps = productCollection.query((record, pk) => {\n\t\tif (record['Status'] == (status == \"Show Active\")){\n\t\t\treturn true;\n\t\t}\n\t});\n\t\n\tClientEvents.publish(\"compDelRows\", \"\");\n\tvar tableComps = filteredComps.filter([\"Id\", \"Name\", \"Expiry\", \"WeightPerBlock\"]);\n\ttableComps.setColumns([\"Id\", \"Name\", \"Expiry\", \"Weight Per Block\"]);\n\tproductsTable.receiveValue(tableComps);\n}\n\nfunction createNewProduct(eventData) {\n\tScript.setState(\"modifyType\", \"add_master\");\n\tClient.jumpToScreen(\"Edit Product\");\n}\n\nfunction removeProductFromCompany() {\n\tvar formData = Script.getFormByKey(\"master\");\n\tvar ids = formData.products.getColumn(\"id\");\n\tfor (var i = 0; i < ids.length; i++) {\n\t\tproductsTable.deleteRows(ids[i]);\n\t\tlet req = {};\n\t\treq[{\"Id\": ids[i], \"Status\": \"0\"}] = {\"Id\": ids[i], \"Status\": \"0\"};\n\t\tDatabase.updateRecord(\"rodent\", \"Products\", req);\n\t}\n}"
        },
        "ev": {}
      },
      "masterProductsTable": {
        "t": "Table",
        "lX": 50,
        "lY": 195,
        "sX": 9.95,
        "sY": 5.69,
        "s": "Manage Master Products",
        "ps": {
          "enabled": "true",
          "scalingType": "OK",
          "width": "90.21%",
          "height": "47%",
          "x": "4.53%",
          "y": "16.1%"
        },
        "ver": "190104c210519",
        "dis": false,
        "tt": "",
        "a": {
          "columns": "name,expiry,weight per block",
          "text color": "#000000",
          "row color": "#000000",
          "colWidths": "",
          "selectable": "multi + single",
          "form id": "master",
          "form key": "products",
          "title": "All Products",
          "display header": "true"
        },
        "ev": {
          "clientEvents": {
            "inputEvents": {
              "New Event #1": {
                "channel": "compDelRows/delete all rows",
                "event": "delete all rows",
                "important": "false"
              }
            },
            "outputEvents": {
              "Selected Product": {
                "channel": "productSelected/receive value",
                "event": "selected",
                "trigger": "selected",
                "important": "false"
              }
            }
          }
        }
      },
      "Dropdown#0": {
        "t": "Dropdown",
        "lX": 851,
        "lY": 140,
        "sX": 1.84,
        "sY": 1,
        "s": "Manage Master Products",
        "ps": {
          "enabled": "true",
          "scalingType": "NOVERT",
          "width": "16.69%",
          "height": "4.13%",
          "x": "77.17%",
          "y": "11.54%"
        },
        "ver": "190104c210519",
        "dis": false,
        "tt": "",
        "a": {
          "default options": "Show Active, Show Inactive",
          "default value": "Show Active"
        },
        "ev": {
          "clientEvents": {
            "outputEvents": {
              "New Event #1": {
                "channel": "changeActive/receive value",
                "event": "selected",
                "trigger": "selected",
                "important": "false"
              }
            }
          }
        }
      },
      "deleteMasterProdIcon": {
        "t": "Icon",
        "lX": 55,
        "lY": 775,
        "sX": 1.1,
        "sY": 1.1,
        "s": "Manage Master Products",
        "ps": {
          "enabled": "false",
          "scalingType": "NOHORIZ,NOVERT",
          "width": "4.99%",
          "height": "4.54%",
          "x": "4.99%",
          "y": "64%"
        },
        "ver": "200628c210519",
        "dis": false,
        "tt": "",
        "a": {
          "icon file": "trash",
          "outline color": "no outline"
        },
        "ev": {
          "clientEvents": {
            "outputEvents": {
              "New Event #1": {
                "channel": "removeMasterProducts/receive value",
                "event": "pressed",
                "trigger": "pressed",
                "important": "false"
              }
            }
          }
        }
      },
      "addMasterProdIcon": {
        "t": "Icon",
        "lX": 120,
        "lY": 775,
        "sX": 1,
        "sY": 1,
        "s": "Manage Master Products",
        "ps": {
          "enabled": "false",
          "scalingType": "NOHORIZ,NOVERT",
          "width": "4.53%",
          "height": "4.13%",
          "x": "10.97%",
          "y": "64.16%"
        },
        "ver": "200628c210519",
        "dis": false,
        "tt": "",
        "a": {
          "outline color": "no outline",
          "icon file": "plus-square"
        },
        "ev": {
          "clientEvents": {
            "outputEvents": {
              "New Event #1": {
                "channel": "addNewMasterProduct/receive value",
                "event": "pressed",
                "trigger": "pressed",
                "important": "false"
              }
            }
          }
        }
      },
      "userRolesTable": {
        "t": "Table",
        "lX": 85,
        "lY": 135,
        "sX": 7.45,
        "sY": 4.55,
        "s": "User Roles",
        "ps": {
          "enabled": "false",
          "scalingType": "OK",
          "width": "67.54%",
          "height": "37.57%",
          "x": "7.52%",
          "y": "11.31%"
        },
        "ver": "190104c210519",
        "dis": false,
        "tt": "",
        "a": {
          "form id": "roles",
          "form key": "users",
          "display header": "true",
          "text color": "#000000",
          "row color": "#000000",
          "columns": "user,updated by,updated on",
          "title": "User Roles",
          "selectable": "multi + single",
          "colWidths": "0.31090174966352624,0.31090174966352624,0.31090174966352624"
        },
        "ev": {
          "clientEvents": {
            "inputEvents": {
              "New Event #1": {
                "channel": "usrDelRows/delete all rows",
                "event": "delete all rows",
                "important": "false"
              }
            },
            "outputEvents": {
              "New Event #2": {
                "channel": "userEdit/receive value",
                "event": "selected",
                "trigger": "selected",
                "important": "false"
              }
            }
          }
        }
      },
      "Scripting#10": {
        "t": "Scripting",
        "lX": 850,
        "lY": 60,
        "sX": 1,
        "sY": 1,
        "s": "User Roles",
        "ps": {
          "enabled": "false",
          "scalingType": "OK",
          "width": "9.07%",
          "height": "8.26%",
          "x": "77.06%",
          "y": "4.95%"
        },
        "ver": "200124c210519",
        "dis": false,
        "tt": "",
        "a": {
          "script type": "javascript",
          "code editor": "//# sourceURL=dynamic-script.js\n/**\n * Description: \n * Create Author/Date: \n * Modified Author/Date Date: \n * Version: \n */\n\n/**\n * Initialise script state (run once at startup)\n */\n var userRolesCollection;\n var currentCompany;\n \n const userRolesTable = Script.getWidget(\"userRolesTable\");\n const compDropdown = Script.getWidget(\"usersCompanyDropdown\");\n \n Script.on('load', function() {\n     Database.readRecords(\"rodent\", \"Companies\", function(eventData) {\n         let companyCollection = SensaCollection.load(eventData.value);\n  \n          Database.readRecords(\"rodent\", \"UserRoles\", function(eventData) {\n              userRolesCollection = SensaCollection.load(eventData.value);\n              let filteredUsers = userRolesCollection.query((record, pk) => {\n                  if (record['User'] == Client.getUser()) {\n                      return true;\n                  }\n              });\n              var userCompanies = filteredUsers.getColumn(\"CompanyId\");\n  \n              let filteredCompanies = companyCollection.query((record, pk) => {\n                  if (userCompanies.includes(pk)) {\n                      return true;\n                  }\n              });\n  \n              let compNames = filteredCompanies.getColumn(\"Name\");\n              let compLoc = filteredCompanies.getColumn(\"Address\");\n              let compIds = filteredCompanies.getColumn(\"Id\");\n  \n              currentCompany = Script.getState(\"currentCompany\");\n              if (currentCompany == null) {\n                  currentCompany = compIds[0];\n              }\n  \n              let compObj = {};\n              compIds.map((comp, idx) => {\n                  compObj[comp] = compNames[idx] + \", \" + compLoc[idx];\n              });\n  \n              Object.keys(compObj).forEach((comp, idx) => {\n                  filteredCompanies.set({\"Id\": comp, \"Name\": compObj[comp]});\n              });\n  \n              filteredCompanies.renameColumn(\"Name\", \"text\");\n              filteredCompanies.renameColumn(\"Id\", \"value\");\n  \n              compDropdown.receiveTextValues(filteredCompanies);\n              compDropdown.receiveValue(compObj[currentCompany]);\n             \n              updateTable();\n          });\n     });\n });\n \n ClientEvents.subscribe(\"usrCcompSelected\", changeCompany);\n ClientEvents.subscribe(\"userEdit\", editUser);\n ClientEvents.subscribe(\"newUser\", createNewUser);\n ClientEvents.subscribe(\"deleteUsers\", deleteUsers);\n \n async function changeCompany(selected) {\n      currentCompany = selected.value;\n\n\t Database.readRecords(\"rodent\", \"UserRoles\", function(eventData) {\n          userRolesCollection = SensaCollection.load(eventData.value);\n          updateTable();\n      });\n }\n         \n function updateTable() {\n      let filteredUsers = userRolesCollection.query((record, pk) => {\n          if ((record['CompanyId'] == currentCompany) &&\n              (record['Status'] == '1')){\n              return true;\n          }\n      });\n\t \n\t var tableCollection = filteredUsers.filter([\"Id\", \"User\", \"UpdatedOn\", \"UpdatedBy\"]);\n\t tableCollection.setColumns([\"Id\", \"User\", \"Updated On\", \"Updated By\"]);\n  \n      ClientEvents.publish(\"usrDelRows\", \"\");\n      userRolesTable.receiveValue(tableCollection);\n }\n \n function editUser(eventData) {\n     Script.setState(\"userRoleInfo\", eventData.value);\n     Script.setState(\"companyId\", currentCompany);\n     Script.setState(\"modifyType\", \"edit\");\n     Client.jumpToScreen(\"Edit User Role\");\n }\n \n function createNewUser() {\n     Script.setState(\"companyId\", currentCompany);\n     Script.setState(\"modifyType\", \"add\");\n     Client.jumpToScreen(\"Edit User Role\");\n }\n \n function deleteUsers() {\n     let formData = Script.getFormByKey(\"roles\");\n     var ids = formData.users.getColumn(\"id\");\n     for (var i = 0; i < ids.length; i++) {\n          userRolesTable.deleteRows(ids[i]);\n          Database.deleteRecord(\"rodent\", \"UserRoles\", \"Id\", ids[i]);\n      }\n }",
          "file name": "../../js/settings/manage user roles/manageUserRoles.js"
        },
        "ev": {}
      },
      "usersCompanyDropdown": {
        "t": "Dropdown",
        "lX": 500,
        "lY": 75,
        "sX": 3.3,
        "sY": 1,
        "s": "User Roles",
        "ps": {
          "enabled": "false",
          "scalingType": "NOVERT",
          "width": "29.92%",
          "height": "4.13%",
          "x": "32.55%",
          "y": "6.28%"
        },
        "ver": "190104c210519",
        "dis": false,
        "tt": "",
        "a": { "default options": "" },
        "ev": {
          "clientEvents": {
            "outputEvents": {
              "New Event #1": {
                "channel": "usrCcompSelected/receive value",
                "event": "selected",
                "trigger": "selected",
                "important": "false"
              }
            }
          }
        }
      },
      "Icon#1": {
        "t": "Icon",
        "lX": 85,
        "lY": 600,
        "sX": 1,
        "sY": 1,
        "s": "User Roles",
        "ps": {
          "enabled": "false",
          "scalingType": "NOHORIZ,NOVERT",
          "width": "4.53%",
          "height": "4.13%",
          "x": "7.71%",
          "y": "49.46%"
        },
        "ver": "200628c210519",
        "dis": false,
        "tt": "",
        "a": {
          "icon file": "trash",
          "outline color": "no outline"
        },
        "ev": {
          "clientEvents": {
            "outputEvents": {
              "New Event #1": {
                "channel": "deleteUsers/receive value",
                "event": "pressed",
                "trigger": "pressed",
                "important": "false"
              }
            }
          }
        }
      },
      "Scripting#7": {
        "t": "Scripting",
        "lX": 420,
        "lY": 25,
        "sX": 1,
        "sY": 1,
        "s": "Edit User Role",
        "ps": {
          "enabled": "false",
          "scalingType": "OK",
          "width": "9.07%",
          "height": "8.26%",
          "x": "38.08%",
          "y": "2.06%"
        },
        "ver": "200124c210519",
        "dis": false,
        "tt": "",
        "a": {
          "script type": "javascript",
          "code editor": "//# sourceURL=dynamic-script.js\n/**\n * Description: \n * Create Author/Date: \n * Modified Author/Date Date: \n * Version: \n */\n\n/**\n * Initialise script state (run once at startup)\n */\nvar userId;\nvar modifyType;\nvar companyId;\n\nconst userFormContainer = Script.getWidget(\"userRoleContainer\");\nconst userSubmitButton = Script.getWidget(\"userRoleSubmit\");\nconst editUserSelect = Script.getWidget(\"editUserSelect\");\nconst editUserCompSelect = Script.getWidget(\"editUserCompSelect\");\n\nScript.on('load', function() {\n\tmodifyType = Script.getState(\"modifyType\");\n\tvar userData;\n\tif (modifyType == \"add\") {\n        userFormContainer.setTitle(\"New User Role\");\n\t\t//Script.enableWidget(\"editUserSelect\");\n\t\tDatabase.readRecords(\"Directory\", \"users\", function(eventData) {\n\t\t\tlet userCollection = SensaCollection.load(eventData.value);\n\t\t\teditUserSelect.receiveList(userCollection.getColumn(\"username\"));\n\t\t});\n    } else if (modifyType == \"edit\") {\n        userData = Script.getState(\"userRoleInfo\");\n\t\tuserFormContainer.setTitle(\"Edit User Role\");\n    }\n\t\n\tDatabase.readRecords(\"rodent\", \"Companies\", function(eventData) {\n\t\tlet companyCollection = SensaCollection.load(eventData.value);\n\t\tDatabase.readRecords(\"rodent\", \"UserRoles\", function(eventData) {\n\t\t\t let userCollection = SensaCollection.load(eventData.value);\n\t\t\t let filteredUsers = userCollection.query((record, pk) => {\n\t\t\t\t if (record['User'] == Client.getUser()) {\n\t\t\t\t\t return true;\n\t\t\t\t }\n\t\t\t });\n\t\t\t var userCompanies = filteredUsers.getColumn(\"CompanyId\");\n \n\t\t\t let filteredCompanies = companyCollection.query((record, pk) => {\n\t\t\t\t if (userCompanies.includes(pk)) {\n\t\t\t\t\t return true;\n\t\t\t\t }\n\t\t\t });\n \n\t\t\t let compNames = filteredCompanies.getColumn(\"Name\");\n\t\t\t let compLoc = filteredCompanies.getColumn(\"Address\");\n\t\t\t let compIds = filteredCompanies.getColumn(\"Id\");\n \n\t\t\t companyId = Script.getState(\"companyId\");\n\t\t\t if (companyId == null) {\n\t\t\t\t companyId = compIds[0];\n\t\t\t }\n \n\t\t\t let compObj = {};\n\t\t\t compIds.map((comp, idx) => {\n\t\t\t\t compObj[comp] = compNames[idx] + \", \" + compLoc[idx];\n\t\t\t });\n \n\t\t\t Object.keys(compObj).forEach((comp, idx) => {\n\t\t\t\t filteredCompanies.set({\"Id\": comp, \"Name\": compObj[comp]});\n\t\t\t });\n \n\t\t\t filteredCompanies.renameColumn(\"Name\", \"text\");\n\t\t\t filteredCompanies.renameColumn(\"Id\", \"value\");\n \n\t\t\t editUserCompSelect.receiveTextValues(filteredCompanies);\n\t\t\t editUserCompSelect.receiveValue(filteredCompanies.get(companyId).text);\n\t\t\tif (userData != undefined) {\n\t\t\t\teditUserSelect.receiveValue(userData.getColumn(\"user\")[0]);\n\t\t\t\t//Script.disableWidget(\"editUserSelect\");\n\t\t\t\tuserId = userData.getColumn(\"id\")[0];\n\t\t\t}\n\t\t });\n\t});\n});\n\nClientEvents.subscribe(\"finishEditUser\", function() {\n\tswitch (modifyType) {\n\t\tcase 'edit':\n\t\t\thandleEdit();\n\t\t\tbreak;\n\t\tcase 'add':\n\t\t\thandleCreate();\n\t\t\tbreak;\n\t}\n});\n\nfunction handleEdit() {\n\tvar formObj = Script.getFormByKey(\"editUser\");\n\tif (formObj == undefined) {\n\t\talert(\"Please fill out all required fields\");\n\t\treturn;\n\t}\n\tvar dbReq = {};\n\tformObj.Id = userId;\n\tlet today = new Date();\n\ttoday = Utils.formatDate(today, \"dd/MM/yyyy HH:mm\", false);\n\tformObj.UpdatedOn = today;\n\tformObj.UpdatedBy = Client.getUser();\n\tdbReq[userId] = formObj;\n\t\n\tDatabase.updateRecord(\"rodent\", \"UserRoles\", dbReq, () => {\n\t\tScript.setState(\"currentCompany\", formObj.CompanyId);\n        Client.jumpToScreen(\"User Roles\");\n    });\n}\n\nfunction handleCreate() {\n\tDatabase.readRecords(\"rodent\", \"UserRoles\", function(eventData) {\n\t\tlet userRoleCollection = SensaCollection.load(eventData.value);\n\t\tvar formObj = Script.getFormByKey(\"editUser\");\n\t\tif (formObj == undefined) {\n\t\t\talert(\"Please fill out all required fields\");\n\t\t\treturn;\n\t\t}\n\t\tvar dbReq = {};\n\t\t\n\t\tlet today = new Date();\n\t\ttoday = Utils.formatDate(today, \"dd/MM/yyyy HH:mm\", false);\n\t\tlet id = +userRoleCollection.getColumn(\"Id\").at(-1) + 1;\n\t\tformObj.Id = `${id}`;\n\t\tformObj.CreatedOn = today;\n\t\tformObj.UpdatedOn = today;\n\t\tformObj.Owner = Client.getUser();\n\t\tformObj.CreatedBy = Client.getUser();\n        formObj.UpdatedBy = Client.getUser();\n\t\t\n\t\t\n\t\tdbReq[id] = formObj;\n\t\tDatabase.createRecords(\"rodent\", \"UserRoles\", dbReq, () => {\n             Script.setState(\"currentCompany\", formObj.CompanyId);\n             Client.jumpToScreen(\"User Roles\");\n         });\n\t});\n}"
        },
        "ev": {}
      },
      "userRoleContainer": {
        "t": "Container",
        "lX": 20,
        "lY": 145,
        "sX": 5.4,
        "sY": 2.8,
        "s": "Edit User Role",
        "ps": {
          "enabled": "false",
          "scalingType": "OK",
          "width": "48.96%",
          "height": "23.12%",
          "x": "1.99%",
          "y": "12.06%"
        },
        "ver": "190104c210519",
        "z": "100",
        "dis": false,
        "tt": "",
        "a": {
          "color": "grey",
          "title": "Title"
        },
        "ev": {}
      },
      "userRoleSubmit": {
        "t": "Button",
        "lX": 440,
        "lY": 350,
        "sX": 1,
        "sY": 1,
        "s": "Edit User Role",
        "ps": {
          "enabled": "false",
          "scalingType": "OK",
          "width": "9.07%",
          "height": "3.8%",
          "x": "39.89%",
          "y": "28.9%"
        },
        "ver": "190104c210519",
        "dis": false,
        "tt": "",
        "a": {
          "color": "orange strong",
          "button name": "Save"
        },
        "ev": {
          "clientEvents": {
            "outputEvents": {
              "New Event #1": {
                "channel": "finishEditUser/receive value",
                "event": "pressed",
                "trigger": "pressed",
                "important": "false"
              }
            }
          }
        }
      },
      "editUserCompSelect": {
        "t": "Dropdown",
        "lX": 35,
        "lY": 265,
        "sX": 5.05,
        "sY": 1,
        "s": "Edit User Role",
        "ps": {
          "enabled": "false",
          "scalingType": "NOVERT",
          "width": "45.78%",
          "height": "4.13%",
          "x": "3.17%",
          "y": "21.88%"
        },
        "ver": "190104c210519",
        "dis": false,
        "tt": "",
        "a": {
          "label text": "Company",
          "form id": "editUser",
          "form key": "CompanyId",
          "default options": ""
        },
        "ev": {}
      },
      "editUserSelect": {
        "t": "Dropdown",
        "lX": 35,
        "lY": 200,
        "sX": 5.05,
        "sY": 1,
        "s": "Edit User Role",
        "ps": {
          "enabled": "false",
          "scalingType": "NOVERT",
          "width": "45.78%",
          "height": "4.13%",
          "x": "3.17%",
          "y": "16.52%"
        },
        "ver": "190104c210519",
        "dis": false,
        "tt": "",
        "a": {
          "label text": "User",
          "form id": "editUser",
          "form key": "User",
          "default options": ""
        },
        "ev": {}
      },
      "Icon#2": {
        "t": "Icon",
        "lX": 135,
        "lY": 600,
        "sX": 1,
        "sY": 1,
        "s": "User Roles",
        "ps": {
          "enabled": "false",
          "scalingType": "NOHORIZ,NOVERT",
          "width": "4.53%",
          "height": "4.13%",
          "x": "7.71%",
          "y": "49.46%"
        },
        "ver": "200628c210519",
        "dis": false,
        "tt": "",
        "a": {
          "icon file": "person-plus",
          "outline color": "no outline"
        },
        "ev": {
          "clientEvents": {
            "outputEvents": {
              "New Event #1": {
                "channel": "newUser/receive value",
                "event": "pressed",
                "trigger": "pressed",
                "important": "false"
              }
            }
          }
        }
      },
      "Dropdown#1": {
        "t": "Dropdown",
        "lX": 559,
        "lY": 41,
        "sX": 2,
        "sY": 1,
        "s": "Error Codes",
        "ps": {
          "enabled": "true",
          "scalingType": "NOVERT",
          "width": "200px",
          "height": "4.13%",
          "x": "47.67%",
          "y": "3.39%"
        },
        "ver": "190104c210519",
        "dis": false,
        "tt": "",
        "a": {
          "default value": "Show Active",
          "default options": "Show Active, Show Inactive"
        },
        "ev": {
          "clientEvents": {
            "outputEvents": {
              "New Event #1": {
                "channel": "changeActiveError/receive value",
                "event": "selected",
                "trigger": "selected",
                "important": "false"
              }
            }
          }
        }
      },
      "Scripting#0": {
        "t": "Scripting",
        "lX": 15,
        "lY": 760,
        "sX": 1,
        "sY": 1,
        "s": "Error Codes",
        "ps": {
          "enabled": "false",
          "scalingType": "OK",
          "width": "9.07%",
          "height": "8.26%",
          "x": "1.36%",
          "y": "62.76%"
        },
        "ver": "200124c210519",
        "dis": false,
        "tt": "",
        "a": {
          "script type": "javascript",
          "code editor": "//# sourceURL=dynamic-script.js\n/**\n * Description: \n * Create Author/Date: \n * Modified Author/Date Date: \n * Version: \n */\n\n/**\n * Initialise script state (run once at startup)\n */\nconst errorCodesTable = Script.getWidget(\"errorCodesTable\");\nconst troubleTable = Script.getWidget(\"troubleTable\");\nconst errorColumns = [\"Id\", \"Code Id\", \"Description\", \"Troubleshooting Help\", \"Code Type\", \"CreatedBy\", \"UpdatedBy\", \"CreatedOn\", \"UpdatedOn\", \"Out of bounds\", \"Status\"];\nconst fileColumns = [\"Id\", \"File Location\", \"CreatedBy\", \"UpdatedBy\", \"CreatedAt\", \"Status\"];\n\nvar errorCollection;\nvar troubleFilesCollection;\n\nvar status = \"Show Active\";\n\nconst deleteCodes = {\n    \"errorCodesTable\": \"compDelErrorRows\",\n    \"troubleTable\": \"compDelFileRows\"\n}\n\nClientEvents.subscribe(\"errorCodeSelected\", editErrorCode);\nClientEvents.subscribe(\"addErrorCode\", createNewErrorCode);\nClientEvents.subscribe(\"troubleFileSelected\", editTroubleFile);\nClientEvents.subscribe(\"addTroubleFile\", createNewTroubleFile);\nClientEvents.subscribe(\"deleteErrorCodes\", removeErrorCode);\nClientEvents.subscribe(\"deleteTroubleFiles\", removeTroubleFiles);\nClientEvents.subscribe(\"changeActiveError\", (eventData) => {\n    status = eventData.value; \n    Database.readRecords(\"rodent\", \"ErrorCodes\", function(eventData) {\n        errorCollection = SensaCollection.load(eventData.value);\n        errorCollection.setColumns(errorColumns);\n        updateTable(errorCodesTable, errorCollection);\n    });\n    if (status !== \"Show Active\") {\n        // Do not attempt to delete inactive elements\n        Script.hideWidget(\"deleteErrorCodeIcon\");\n    } else {\n        // Re-enable widgets if hidden before\n        Script.showWidget(\"deleteErrorCodeIcon\");\n    }\n});\n\nClientEvents.subscribe(\"changeActiveFiles\", (eventData) => {\n    status = eventData.value; \n    Database.readRecords(\"rodent\", \"TroubleshootingFiles\", function(eventData) {\n        troubleFilesCollection = SensaCollection.load(eventData.value);\n        troubleFilesCollection.setColumns(fileColumns);\n        updateTable(troubleTable, troubleFilesCollection);\n    });\n    if (status !== \"Show Active\") {\n        // Do not attempt to delete inactive elements\n        Script.hideWidget(\"deleteTroubleFilesIcon\");\n    } else {\n        // Re-enable widgets if hidden before\n        Script.showWidget(\"deleteTroubleFilesIcon\");\n    }\n});\n\nScript.on('load', function() {\n\n    Database.readRecords(\"rodent\", \"ErrorCodes\", function(eventData) {\n        errorCollection = SensaCollection.load(eventData.value);\n        errorCollection.setColumns(errorColumns);\n        updateTable(errorCodesTable, errorCollection);\n    });\n\n    Database.readRecords(\"rodent\", \"TroubleshootingFiles\", function(eventData) {\n        troubleFilesCollection = SensaCollection.load(eventData.value);\n        troubleFilesCollection.setColumns(fileColumns)\n        updateTable(troubleTable, troubleFilesCollection);\n    });\n\n});\n\nfunction updateTable(table, collection) {\n    let filteredCollection = collection.query((record, pk) => {\n        if (record['Status'] == (status == \"Show Active\")){\n            return true;\n        }\n    });\n    \n    ClientEvents.publish(deleteCodes[table._name], \"\");\n    table.receiveValue(filteredCollection);\n}\n\nfunction editErrorCode(eventData) {\n    Script.setState(\"errorData\", eventData.value);\n    Script.setState(\"modifyType\", \"edit\");\n    Client.jumpToScreen(\"Edit Error Codes\");\n}\n\nfunction editTroubleFile(eventData) {\n    Script.setState(\"fileData\", eventData.value);\n    Script.setState(\"modifyType\", \"edit_file\");\n    Client.jumpToScreen(\"Edit Error Codes\");\n}\n\nfunction createNewErrorCode() {\n    Script.setState(\"modifyType\", \"add\");\n    Client.jumpToScreen(\"Edit Error Codes\");\n}\n\nfunction createNewTroubleFile() {\n    Script.setState(\"modifyType\", \"add_file\");\n    Client.jumpToScreen(\"Edit Error Codes\");\n}\n\nfunction removeErrorCode() {\n    var formData = Script.getFormByKey(\"errors\");\n    var ids = formData.codes.getColumn(\"id\");\n    for (var i = 0; i < ids.length; i++) {\n        errorCodesTable.deleteRows(ids[i]);\n        let req = {};\n        req[{\"Id\": ids[i], \"Status\": \"0\"}] = {\"Id\": ids[i], \"Status\": \"0\"};\n        Database.updateRecord(\"rodent\", \"ErrorCodes\", req);\n    }\n}\n\nfunction removeTroubleFiles() {\n    var formData = Script.getFormByKey(\"errors\");\n    var ids = formData.files.getColumn(\"id\");\n    for (var i = 0; i < ids.length; i++) {\n        troubleTable.deleteRows(ids[i]);\n        let req = {};\n        req[{\"Id\": ids[i], \"Status\": \"0\"}] = {\"Id\": ids[i], \"Status\": \"0\"};\n        Database.updateRecord(\"rodent\", \"TroubleshootingFiles\", req);\n    }\n}"
        },
        "ev": {}
      },
      "errorCodesTable": {
        "t": "Table",
        "lX": 22,
        "lY": 99,
        "sX": 7.17,
        "sY": 4.85,
        "s": "Error Codes",
        "ps": {
          "enabled": "true",
          "scalingType": "OK",
          "width": "65%",
          "height": "40.02%",
          "x": "0.91%",
          "y": "8.18%"
        },
        "ver": "190104c210519",
        "dis": false,
        "tt": "",
        "a": {
          "text color": "#000000",
          "row color": "#000000",
          "columns": "code id,description,troubleshooting help,code type,out of bounds",
          "display header": "true",
          "colWidths": "0.11513583441138421,0.4521345407503234,0.13454075032341525,0.11707632600258733,0.14877102199223805",
          "selectable": "multi + single",
          "title": "Error Codes",
          "form id": "errors",
          "form key": "codes"
        },
        "ev": {
          "clientEvents": {
            "inputEvents": {
              "Delete All Rows": {
                "channel": "compDelErrorRows/delete all rows",
                "event": "delete all rows",
                "important": "false"
              }
            },
            "outputEvents": {
              "Selected Error code": {
                "channel": "errorCodeSelected/receive value",
                "event": "selected",
                "trigger": "selected",
                "important": "false"
              }
            }
          }
        }
      },
      "troubleTable": {
        "t": "Table",
        "lX": 801,
        "lY": 99,
        "sX": 2.85,
        "sY": 4.81,
        "s": "Error Codes",
        "ps": {
          "enabled": "true",
          "scalingType": "OK",
          "width": "25.84%",
          "height": "39.72%",
          "x": "72.62%",
          "y": "8.18%"
        },
        "ver": "190104c210519",
        "dis": false,
        "tt": "",
        "a": {
          "text color": "#000000",
          "row color": "#000000",
          "columns": "file location",
          "display header": "true",
          "colWidths": "0.823321554770318",
          "selectable": "multi + single",
          "title": "Troubleshooting Files",
          "form id": "errors",
          "form key": "files"
        },
        "ev": {
          "clientEvents": {
            "inputEvents": {
              "Delete All Rows": {
                "channel": "compDelFileRows/delete all rows",
                "event": "delete all rows",
                "important": "false"
              }
            },
            "outputEvents": {
              "Edit Row": {
                "channel": "troubleFileSelected/receive value",
                "event": "selected",
                "trigger": "selected",
                "important": "false"
              }
            }
          }
        }
      },
      "deleteErrorCodeIcon": {
        "t": "Icon",
        "lX": 10,
        "lY": 595,
        "sX": 1,
        "sY": 1,
        "s": "Error Codes",
        "ps": {
          "enabled": "false",
          "scalingType": "NOHORIZ,NOVERT",
          "width": "4.53%",
          "height": "4.13%",
          "x": "0.91%",
          "y": "49.13%"
        },
        "ver": "200628c210519",
        "dis": false,
        "tt": "",
        "a": {
          "outline color": "no outline",
          "icon file": "trash"
        },
        "ev": {
          "clientEvents": {
            "outputEvents": {
              "New Event #1": {
                "channel": "deleteErrorCodes/receive value",
                "event": "pressed",
                "trigger": "pressed",
                "important": "false"
              }
            }
          }
        }
      },
      "addErrorCodeIcon": {
        "t": "Icon",
        "lX": 65,
        "lY": 595,
        "sX": 1,
        "sY": 1,
        "s": "Error Codes",
        "ps": {
          "enabled": "false",
          "scalingType": "NOHORIZ,NOVERT",
          "width": "4.53%",
          "height": "4.13%",
          "x": "5.89%",
          "y": "49.13%"
        },
        "ver": "200628c210519",
        "dis": false,
        "tt": "",
        "a": {
          "icon file": "plus-square",
          "outline color": "no outline"
        },
        "ev": {
          "clientEvents": {
            "outputEvents": {
              "New Event #1": {
                "channel": "addErrorCode/receive value",
                "event": "pressed",
                "trigger": "pressed",
                "important": "false"
              }
            }
          }
        }
      },
      "deleteTroubleFilesIcon": {
        "t": "Icon",
        "lX": 801,
        "lY": 595,
        "sX": 1,
        "sY": 1,
        "s": "Error Codes",
        "ps": {
          "enabled": "true",
          "scalingType": "NOHORIZ,NOVERT",
          "width": "50px",
          "height": "4.13%",
          "x": "72.62%",
          "y": "49.13%"
        },
        "ver": "200628c210519",
        "dis": false,
        "tt": "",
        "a": {
          "outline color": "no outline",
          "icon file": "trash"
        },
        "ev": {
          "clientEvents": {
            "outputEvents": {
              "New Event #1": {
                "channel": "deleteTroubleFiles/receive value",
                "event": "pressed",
                "trigger": "pressed",
                "important": "false"
              }
            }
          }
        }
      },
      "addTroubleFilesIcon": {
        "t": "Icon",
        "lX": 860,
        "lY": 595,
        "sX": 1,
        "sY": 1,
        "s": "Error Codes",
        "ps": {
          "enabled": "true",
          "scalingType": "NOHORIZ,NOVERT",
          "width": "50px",
          "height": "4.13%",
          "x": "78%",
          "y": "49.13%"
        },
        "ver": "200628c210519",
        "dis": false,
        "tt": "",
        "a": {
          "icon file": "plus-square",
          "outline color": "no outline"
        },
        "ev": {
          "clientEvents": {
            "outputEvents": {
              "New Event #1": {
                "channel": "addTroubleFile/receive value",
                "event": "pressed",
                "trigger": "pressed",
                "important": "false"
              }
            }
          }
        }
      },
      "Scripting#1": {
        "t": "Scripting",
        "lX": 35,
        "lY": 575,
        "sX": 1,
        "sY": 1,
        "s": "Edit Error Codes",
        "ps": {
          "enabled": "false",
          "scalingType": "OK",
          "width": "",
          "height": "",
          "x": "",
          "y": ""
        },
        "ver": "200124c210519",
        "dis": false,
        "tt": "",
        "a": {
          "script type": "javascript",
          "code editor": "//# sourceURL=dynamic-script.js\n/**\n * Description: \n * Create Author/Date: \n * Modified Author/Date Date: \n * Version: \n */\n\n/**\n * Initialise script state (run once at startup)\n */\nvar errorId;\nvar fileId;\nvar modifyType;\nconst errorContainer = Script.getWidget(\"errorContainer\");\nconst errorSubmitButton = Script.getWidget(\"errorSubmitButton\");\nconst troubleshootinghelp = Script.getWidget(\"troubleshootinghelp\");\n \nScript.on('load', function() {\n    // hide at start\n    hideErrorForm();\n    hideFileForm();\n\n    modifyType = Script.getState(\"modifyType\");\n    if (modifyType == \"add_file\") {\n        errorContainer.setTitle(\"New Troubleshooting File\");\n        showFileForm();\n        return;\n    } else if (modifyType == \"edit_file\") {\n        var fileData = Script.getState(\"fileData\");\n        errorContainer.setTitle(\"Edit Troubleshooting File\");\n\n        var fileObj = {};\n        fileId = fileData.getColumn(\"id\")[0];\n        fileObj.FileLocation = fileData.getColumn(\"file location\");\n        fileObj.Status = fileData.getColumn(\"status\");\n        Script.setForm(\"filelocation\", fileObj);\n        showFileForm();\n        return;\n    }\n\n    showErrorForm();\n    Database.readRecords(\"rodent\", \"TroubleshootingFiles\", function(eventData) {\n        let fileCollection = SensaCollection.load(eventData.value);\n        fileCollection = fileCollection.filter([\"Id\", \"FileLocation\"]);\n        fileCollection.setColumns([\"value\", \"text\"])\n        troubleshootinghelp.receiveTextValues(fileCollection);\n\n        var errorData;\n    \n        if (modifyType == \"add\") {\n            errorContainer.setTitle(\"New Error Code\");\n            return;\n        } else if (modifyType == \"edit\") {\n            errorData = Script.getState(\"errorData\");\n        }\n\n        var errorObj = {}\n        errorId = errorData.getColumn(\"id\")[0];\n        errorObj.CodeId = errorData.getColumn(\"code id\");\n        errorObj.Description = errorData.getColumn(\"description\");\n        errorObj.Status = errorData.getColumn(\"status\");\n        let filteredFile = fileCollection.query((record, pk) => {\n            if (record.value == errorData.getColumn(\"troubleshooting help\")[0]) {\n                return true;\n            }\n        });\n        errorObj.TroubleshootingHelp = filteredFile.data[0];\n        errorObj.CodeType = errorData.getColumn(\"code type\");\n        errorObj.OOB = errorData.getColumn(\"out of bounds\");\n\n        Script.setForm(\"errorcode\", errorObj);\n        errorContainer.setTitle(\"Edit Error Code\");\n    });\n});\n  \nClientEvents.subscribe(\"finishSubmitError\", function() {\n    switch (modifyType) {\n        case 'edit':\n            handleEdit();\n            break;\n        case 'add':\n            handleCreate();\n            break;\n        case 'edit_file':\n            handleEditFile();\n            break;\n        case 'add_file':\n            handleCreateFile();\n            break;\n    }\n});\n  \nfunction handleEdit() {\n    var formObj = Script.getFormByKey(\"errorcode\");\n    if (formObj == undefined) {\n        alert(\"Please fill out all required fields\");\n        return;\n    }\n        \n    var dbReq = {};\n    formObj.Id = errorId;\n    formObj.Status = +formObj.Status;\n    let today = new Date();\n    today = Utils.formatDate(today, \"dd/MM/yyyy HH:mm\", false);\n    formObj.UpdatedOn = today;\n    formObj.UpdatedBy = Client.getUser();\n    dbReq[errorId] = formObj;\n        \n    Database.updateRecord(\"rodent\", \"ErrorCodes\", dbReq, () => {\n        //Script.setState(\"currentCompany\", formObj.CompanyId);\n        Client.jumpToScreen(\"Error Codes\");\n    });\n}\n\nfunction handleEditFile() {\n    var formObj = Script.getFormByKey(\"filelocation\");\n    if (formObj == undefined) {\n        alert(\"Please fill out all required fields\");\n        return;\n    }\n        \n    var dbReq = {};\n    formObj.Id = fileId;\n    formObj.Status = +formObj.Status;\n    formObj.UpdatedBy = Client.getUser();\n    dbReq[fileId] = formObj;\n        \n    Database.updateRecord(\"rodent\", \"TroubleshootingFiles\", dbReq, () => {\n        //Script.setState(\"currentCompany\", formObj.CompanyId);\n        Client.jumpToScreen(\"Error Codes\");\n    });\n}\n \n  \nfunction handleCreate() {\n    Database.readRecords(\"rodent\", \"ErrorCodes\", function(eventData) {\n        var errorCollection = SensaCollection.load(eventData.value);\n        var formObj = Script.getFormByKey(\"errorcode\");\n        \n        if (formObj == undefined) {\n            alert(\"Please fill out all required fields\");\n            return;\n        }\n\n        var dbReq = {};\n        var errorCount = Object.keys(errorCollection.data).length;\n        formObj.Id = `${errorCount + 1}`;\n        formObj.Status = +formObj.Status;\n\n        let today = new Date();\n        today = Utils.formatDate(today, \"dd/MM/yyyy HH:mm\", false);\n        formObj.CreatedOn = today;\n        formObj.UpdatedOn = today;\n        formObj.CreatedBy = Client.getUser();\n        formObj.UpdatedBy = Client.getUser();\n        dbReq[errorCount + 1] = formObj;\n\n        Database.createRecords(\"rodent\", \"ErrorCodes\", dbReq, () => {\n            \n            Client.jumpToScreen(\"Error Codes\");\n        });\n    });\n}\n\nfunction handleCreateFile() {\n    Database.readRecords(\"rodent\", \"TroubleshootingFiles\", function(eventData) {\n        var fileCollection = SensaCollection.load(eventData.value);\n        var formObj = Script.getFormByKey(\"filelocation\");\n        \n        if (formObj == undefined) {\n            alert(\"Please fill out all required fields\");\n            return;\n        }\n\n        var dbReq = {};\n        var fileCount = Object.keys(fileCollection.data).length;\n        formObj.Id = `${fileCount + 1}`;\n        formObj.Status = +formObj.Status;\n\n        let today = new Date();\n        today = Utils.formatDate(today, \"dd/MM/yyyy HH:mm\", false);\n        formObj.CreatedAt = today;\n        formObj.CreatedBy = Client.getUser();\n        formObj.UpdatedBy = Client.getUser();\n        dbReq[fileCount + 1] = formObj;\n\n        Database.createRecords(\"rodent\", \"TroubleshootingFiles\", dbReq, () => {\n            \n            Client.jumpToScreen(\"Error Codes\");\n        });\n    });\n}\n\nfunction hideErrorForm() {\n    Script.hideWidget(\"codeId\");\n    Script.hideWidget(\"desc\");\n    Script.hideWidget(\"troubleshootinghelp\");\n    Script.hideWidget(\"codetype\");\n    Script.hideWidget(\"oob\");\n}\n\nfunction showErrorForm() {\n    Script.showWidget(\"codeId\");\n    Script.showWidget(\"desc\");\n    Script.showWidget(\"troubleshootinghelp\");\n    Script.showWidget(\"codetype\");\n    Script.showWidget(\"oob\");\n}\n\nfunction hideFileForm() {\n    Script.hideWidget(\"fileloc\");\n    Script.hideWidget(\"filestatus\");\n}\n\nfunction showFileForm() {\n    Script.showWidget(\"fileloc\");\n    Script.showWidget(\"filestatus\");\n}"
        },
        "ev": {}
      },
      "Input#3": {
        "t": "Input",
        "lX": 60,
        "lY": 450,
        "sX": 1,
        "sY": 1,
        "s": "Edit Error Codes",
        "ps": {
          "enabled": "false",
          "scalingType": "NOVERT",
          "width": "9.07%",
          "height": "4.41%",
          "x": "5.62%",
          "y": "37.16%"
        },
        "ver": "270520c210519",
        "dis": false,
        "tt": "",
        "a": {
          "color": "grey",
          "label text": "Status",
          "type": "checkbox",
          "checkbox label side": "right",
          "default value": "1",
          "form id": "errorcode",
          "form key": "Status"
        },
        "ev": {}
      },
      "errorContainer": {
        "t": "Container",
        "lX": 50,
        "lY": 50,
        "sX": 4.3,
        "sY": 4.6,
        "s": "Edit Error Codes",
        "ps": {
          "enabled": "false",
          "scalingType": "OK",
          "width": "38.98%",
          "height": "37.9%",
          "x": "4.53%",
          "y": "4.13%"
        },
        "ver": "190104c210519",
        "z": "100",
        "dis": false,
        "tt": "",
        "a": {
          "color": "grey",
          "title": "Title"
        },
        "ev": {}
      },
      "errorSubmitButton": {
        "t": "Button",
        "lX": 365,
        "lY": 450,
        "sX": 1,
        "sY": 1,
        "s": "Edit Error Codes",
        "ps": {
          "enabled": "false",
          "scalingType": "OK",
          "width": "9.07%",
          "height": "3.8%",
          "x": "25.39%",
          "y": "37.32%"
        },
        "ver": "190104c210519",
        "dis": false,
        "tt": "",
        "a": {
          "color": "orange strong",
          "button name": "Submit"
        },
        "ev": {
          "clientEvents": {
            "outputEvents": {
              "New Event #1": {
                "channel": "finishSubmitError/receive value",
                "event": "pressed",
                "trigger": "pressed",
                "important": "false"
              }
            }
          }
        }
      },
      "troubleshootinghelp": {
        "t": "Dropdown",
        "lX": 70,
        "lY": 265,
        "sX": 3.95,
        "sY": 1,
        "s": "Edit Error Codes",
        "ps": {
          "enabled": "false",
          "scalingType": "NOVERT",
          "width": "35.81%",
          "height": "4.13%",
          "x": "6.26%",
          "y": "21.72%"
        },
        "ver": "190104c210519",
        "dis": false,
        "tt": "",
        "a": {
          "default options": "",
          "form id": "errorcode",
          "form key": "TroubleshootingHelp",
          "label text": "Troubleshooting Help",
          "disable edit": "false"
        },
        "ev": {}
      },
      "Dropdown#2": {
        "t": "Dropdown",
        "lX": 859,
        "lY": 41,
        "sX": 2,
        "sY": 1,
        "s": "Error Codes",
        "ps": {
          "enabled": "true",
          "scalingType": "NOVERT",
          "width": "200px",
          "height": "4.13%",
          "x": "96% - 200px",
          "y": "3.39%"
        },
        "ver": "190104c210519",
        "dis": false,
        "tt": "",
        "a": {
          "default value": "Show Active",
          "default options": "Show Active, Show Inactive"
        },
        "ev": {
          "clientEvents": {
            "outputEvents": {
              "New Event #1": {
                "channel": "changeActiveFiles/receive value",
                "event": "selected",
                "trigger": "selected",
                "important": "false"
              }
            }
          }
        }
      },
      "codeId": {
        "t": "Input",
        "lX": 70,
        "lY": 145,
        "sX": 4.05,
        "sY": 1,
        "s": "Edit Error Codes",
        "ps": {
          "enabled": "false",
          "scalingType": "NOVERT",
          "width": "36.72%",
          "height": "4.38%",
          "x": "6.35%",
          "y": "11.97%"
        },
        "ver": "270520c210519",
        "dis": false,
        "tt": "",
        "a": {
          "color": "grey",
          "form id": "errorcode",
          "label text": "Code ID",
          "form key": "CodeId",
          "type": "number",
          "required": "true"
        },
        "ev": {}
      },
      "desc": {
        "t": "Input",
        "lX": 70,
        "lY": 205,
        "sX": 4.05,
        "sY": 1,
        "s": "Edit Error Codes",
        "ps": {
          "enabled": "false",
          "scalingType": "NOVERT",
          "width": "36.72%",
          "height": "4.38%",
          "x": "6.44%",
          "y": "17.01%"
        },
        "ver": "270520c210519",
        "dis": false,
        "tt": "",
        "a": {
          "color": "grey",
          "form id": "errorcode",
          "label text": "Description",
          "form key": "Description",
          "required": "true"
        },
        "ev": {}
      },
      "codetype": {
        "t": "Input",
        "lX": 70,
        "lY": 325,
        "sX": 4.05,
        "sY": 1,
        "s": "Edit Error Codes",
        "ps": {
          "enabled": "false",
          "scalingType": "NOVERT",
          "width": "36.72%",
          "height": "4.38%",
          "x": "6.44%",
          "y": "17.01%"
        },
        "ver": "270520c210519",
        "dis": false,
        "tt": "",
        "a": {
          "color": "grey",
          "form id": "errorcode",
          "label text": "Code Type",
          "form key": "CodeType",
          "type": "number",
          "required": "true"
        },
        "ev": {}
      },
      "oob": {
        "t": "Input",
        "lX": 70,
        "lY": 385,
        "sX": 4.05,
        "sY": 1,
        "s": "Edit Error Codes",
        "ps": {
          "enabled": "false",
          "scalingType": "NOVERT",
          "width": "36.72%",
          "height": "4.38%",
          "x": "6.35%",
          "y": "31.79%"
        },
        "ver": "270520c210519",
        "dis": false,
        "tt": "",
        "a": {
          "color": "grey",
          "form id": "errorcode",
          "label text": "Out of Bounds",
          "form key": "OOB",
          "type": "number",
          "required": "true"
        },
        "ev": {}
      },
      "fileloc": {
        "t": "Input",
        "lX": 70,
        "lY": 145,
        "sX": 4.05,
        "sY": 1,
        "s": "Edit Error Codes",
        "ps": {
          "enabled": "false",
          "scalingType": "NOVERT",
          "width": "36.72%",
          "height": "4.38%",
          "x": "6.35%",
          "y": "10.73%"
        },
        "ver": "270520c210519",
        "dis": false,
        "tt": "",
        "a": {
          "color": "grey",
          "form id": "filelocation",
          "label text": "File Location",
          "form key": "FileLocation",
          "required": "true"
        },
        "ev": {}
      },
      "filestatus": {
        "t": "Input",
        "lX": 60,
        "lY": 450,
        "sX": 1,
        "sY": 1,
        "s": "Edit Error Codes",
        "ps": {
          "enabled": "false",
          "scalingType": "NOVERT",
          "width": "9.08%",
          "height": "4.41%",
          "x": "8.27%",
          "y": "42.26%"
        },
        "ver": "270520c210519",
        "dis": false,
        "tt": "",
        "a": {
          "color": "grey",
          "label text": "Status",
          "type": "checkbox",
          "checkbox label side": "right",
          "default value": "1",
          "form key": "Status",
          "form id": "filelocation"
        },
        "ev": {}
      },
      "Dropdown#3": {
        "t": "Dropdown",
        "lX": 783,
        "lY": 41,
        "sX": 2.65,
        "sY": 1,
        "s": "Manage Companies",
        "ps": {
          "enabled": true,
          "scalingType": "NOVERT",
          "width": "24.03%",
          "height": "4.13%",
          "x": "70.99%",
          "y": "3.39%"
        },
        "ver": "190104c210519",
        "dis": false,
        "tt": "",
        "a": {
          "default options": "Show Active, Show Inactive",
          "default value": "Show Active"
        },
        "ev": {
          "clientEvents": {
            "outputEvents": {
              "New Event #1": {
                "channel": "changeActiveCompany/receive value",
                "event": "selected",
                "trigger": "selected",
                "important": "false"
              }
            }
          }
        }
      },
      "Scripting#2": {
        "t": "Scripting",
        "lX": 50,
        "lY": 900,
        "sX": 1,
        "sY": 1,
        "s": "Manage Companies",
        "ps": {
          "enabled": false,
          "scalingType": "OK",
          "width": "",
          "height": "",
          "x": "",
          "y": ""
        },
        "ver": "200124c210519",
        "dis": false,
        "tt": "",
        "a": {
          "script type": "javascript",
          "code editor": "//# sourceURL=dynamic-script.js\n/**\n * Description: \n * Create Author/Date: \n * Modified Author/Date Date: \n * Version: \n */\n\n/**\n * Initialise script state (run once at startup)\n */\nconst companiesTable = Script.getWidget(\"companiesTable\");\n \nvar companiesCollection;\n \nvar status = \"Show Active\";\n \nClientEvents.subscribe(\"editCompany\", editCompany);\nClientEvents.subscribe(\"addCompany\", addCompany);\nClientEvents.subscribe(\"deleteCompany\", deleteCompany);\nClientEvents.subscribe(\"changeActiveCompany\", (eventData) => {\n    status = eventData.value; \n    Database.readRecords(\"rodent\", \"Companies\", function(eventData) {\n        companiesCollection = SensaCollection.load(eventData.value);\n        updateTable(companiesTable, companiesCollection);\n    });\n    if (status !== \"Show Active\") {\n        // Do not attempt to delete inactive elements\n        Script.hideWidget(\"deleteCompanyIcon\");\n    } else {\n        // Re-enable widgets if hidden before\n        Script.showWidget(\"deleteCompanyIcon\");\n    }\n});\n \nScript.on('load', function() {\n\n    Database.readRecords(\"rodent\", \"Companies\", function(eventData) {\n        companiesCollection = SensaCollection.load(eventData.value);\n        updateTable(companiesTable, companiesCollection);\n    });\n});\n \nfunction updateTable(table, collection) {\n    let filteredCollection = collection.query((record, pk) => {\n        if (record['Status'] == (status == \"Show Active\")) {\n            return true;\n        }\n    });\n    \n    ClientEvents.publish(\"clearAllCompanies\", \"\");\n    table.receiveValue(filteredCollection);\n}\n \nfunction editCompany(eventData) {\n    Script.setState(\"companyData\", eventData.value);\n    Script.setState(\"modifyType\", \"edit\");\n    Client.jumpToScreen(\"Edit Company\");\n}\n\nfunction addCompany() {\n    Script.setState(\"modifyType\", \"add\");\n    Client.jumpToScreen(\"Edit Company\");\n}\n\nfunction deleteCompany() {\n    var formData = Script.getFormByKey(\"company\");\n    var ids = formData.company.getColumn(\"id\");\n    for (var i = 0; i < ids.length; i++) {\n        companiesTable.deleteRows(ids[i]);\n        let req = {};\n        req[{\"Id\": ids[i], \"Status\": \"0\"}] = {\"Id\": ids[i], \"Status\": \"0\"};\n        Database.updateRecord(\"rodent\", \"Companies\", req);\n    }\n}"
        },
        "ev": {}
      },
      "companiesTable": {
        "t": "Table",
        "lX": 49,
        "lY": 94,
        "sX": 10,
        "sY": 5.55,
        "s": "Manage Companies",
        "ps": {
          "enabled": true,
          "scalingType": "OK",
          "width": "90.66%",
          "height": "45.83%",
          "x": "4.44%",
          "y": "7.76%"
        },
        "ver": "190104c210519",
        "dis": false,
        "tt": "",
        "a": {
          "text color": "#000000",
          "row color": "#000000",
          "columns": "name,address",
          "form id": "company",
          "form key": "company",
          "title": "Companies",
          "colWidths": "0.625250501002004,0.3246492985971944",
          "display header": "true",
          "selectable": "multi + single"
        },
        "ev": {
          "clientEvents": {
            "inputEvents": {
              "Delete Rows": {
                "channel": "clearAllCompanies/delete all rows",
                "event": "delete all rows",
                "important": "false"
              }
            },
            "outputEvents": {
              "Edit Company": {
                "channel": "editCompany/receive value",
                "event": "selected",
                "trigger": "selected",
                "important": "false"
              }
            }
          }
        }
      },
      "deleteCompanyIcon": {
        "t": "Icon",
        "lX": 50,
        "lY": 670,
        "sX": 1,
        "sY": 1,
        "s": "Manage Companies",
        "ps": {
          "enabled": true,
          "scalingType": "NOHORIZ,NOVERT",
          "width": "50px",
          "height": "4.13%",
          "x": "4.53%",
          "y": "55.33%"
        },
        "ver": "200628c210519",
        "dis": false,
        "tt": "",
        "a": {
          "outline color": "no outline",
          "icon file": "trash"
        },
        "ev": {
          "clientEvents": {
            "outputEvents": {
              "New Event #1": {
                "channel": "deleteCompany/receive value",
                "event": "pressed",
                "trigger": "pressed",
                "important": "false"
              }
            }
          }
        }
      },
      "addCompanyIcon": {
        "t": "Icon",
        "lX": 110,
        "lY": 670,
        "sX": 1,
        "sY": 1,
        "s": "Manage Companies",
        "ps": {
          "enabled": true,
          "scalingType": "NOHORIZ,NOVERT",
          "width": "50px",
          "height": "4.13%",
          "x": "9.97%",
          "y": "55.33%"
        },
        "ver": "200628c210519",
        "dis": false,
        "tt": "",
        "a": {
          "outline color": "no outline",
          "icon file": "plus-square"
        },
        "ev": {
          "clientEvents": {
            "outputEvents": {
              "New Event #1": {
                "channel": "addCompany/receive value",
                "event": "pressed",
                "trigger": "pressed",
                "important": "false"
              }
            }
          }
        }
      },
      "companyContainer": {
        "t": "Container",
        "lX": 50,
        "lY": 50,
        "sX": 5,
        "sY": 3.4,
        "s": "Edit Company",
        "ps": {
          "enabled": "false",
          "scalingType": "OK",
          "width": "45.33%",
          "height": "28.08%",
          "x": "4.53%",
          "y": "4.13%"
        },
        "ver": "190104c210519",
        "z": "100",
        "dis": false,
        "tt": "",
        "a": {
          "color": "grey",
          "title": "Title"
        },
        "ev": {}
      },
      "Input#0": {
        "t": "Input",
        "lX": 65,
        "lY": 155,
        "sX": 4.8,
        "sY": 1,
        "s": "Edit Company",
        "ps": {
          "enabled": "false",
          "scalingType": "NOVERT",
          "width": "43.52%",
          "height": "4.38%",
          "x": "5.89%",
          "y": "12.8%"
        },
        "ver": "270520c210519",
        "dis": false,
        "tt": "",
        "a": {
          "label text": "Name",
          "color": "grey",
          "form id": "companyform",
          "form key": "Name",
          "required": "true"
        },
        "ev": {}
      },
      "Input#1": {
        "t": "Input",
        "lX": 65,
        "lY": 235,
        "sX": 4.8,
        "sY": 1,
        "s": "Edit Company",
        "ps": {
          "enabled": "false",
          "scalingType": "NOVERT",
          "width": "43.52%",
          "height": "4.38%",
          "x": "6.07%",
          "y": "19.41%"
        },
        "ver": "270520c210519",
        "dis": false,
        "tt": "",
        "a": {
          "label text": "Address",
          "color": "grey",
          "form id": "companyform",
          "form key": "Address",
          "required": "true"
        },
        "ev": {}
      },
      "Input#7": {
        "t": "Input",
        "lX": 60,
        "lY": 325,
        "sX": 1,
        "sY": 1,
        "s": "Edit Company",
        "ps": {
          "enabled": "false",
          "scalingType": "NOVERT",
          "width": "9.07%",
          "height": "4.38%",
          "x": "5.44%",
          "y": "26.92%"
        },
        "ver": "270520c210519",
        "dis": false,
        "tt": "",
        "a": {
          "type": "checkbox",
          "checkbox label side": "right",
          "label text": "Enabled",
          "form id": "companyform",
          "form key": "Status",
          "default value": "1"
        },
        "ev": {}
      },
      "companySubmitButton": {
        "t": "Button",
        "lX": 435,
        "lY": 320,
        "sX": 1,
        "sY": 1,
        "s": "Edit Company",
        "ps": {
          "enabled": "false",
          "scalingType": "OK",
          "width": "9.07%",
          "height": "3.8%",
          "x": "39.44%",
          "y": "26.42%"
        },
        "ver": "190104c210519",
        "dis": false,
        "tt": "",
        "a": {
          "color": "orange strong",
          "button name": "Submit"
        },
        "ev": {
          "clientEvents": {
            "outputEvents": {
              "New Event #1": {
                "channel": "finishSubmitCompany/receive value",
                "event": "pressed",
                "trigger": "pressed",
                "important": "false"
              }
            }
          }
        }
      },
      "Scripting#3": {
        "t": "Scripting",
        "lX": 50,
        "lY": 435,
        "sX": 1,
        "sY": 1,
        "s": "Edit Company",
        "ps": {
          "enabled": "false",
          "scalingType": "OK",
          "width": "9.07%",
          "height": "8.26%",
          "x": "4.53%",
          "y": "35.92%"
        },
        "ver": "200124c210519",
        "dis": false,
        "tt": "",
        "a": {
          "script type": "javascript",
          "code editor": "//# sourceURL=dynamic-script.js\n/**\n * Description: \n * Create Author/Date: \n * Modified Author/Date Date: \n * Version: \n */\n\n/**\n * Initialise script state (run once at startup)\n */\nvar companyId;\nvar modifyType;\nconst companyContainer = Script.getWidget(\"companyContainer\");\nconst companySubmitButton = Script.getWidget(\"companySubmitButton\");\n\nScript.on('load', function() {\n    modifyType = Script.getState(\"modifyType\");\n    var companyData;\n\n    if (modifyType == \"add\") {\n        companyContainer.setTitle(\"New Company\");\n        return;\n    } else if (modifyType == \"edit\") {\n        companyData = Script.getState(\"companyData\");\n    }\n\n    var companyObj = {}\n    companyId = companyData.getColumn(\"id\")[0];\n    companyObj.Name = companyData.getColumn(\"name\");\n    companyObj.Address = companyData.getColumn(\"address\");\n    companyObj.Status = companyData.getColumn(\"status\");\n\n    Script.setForm(\"companyform\", companyObj);\n    companyContainer.setTitle(\"Edit Company\");\n});\n\nClientEvents.subscribe(\"finishSubmitCompany\", function() {\n    switch (modifyType) {\n        case 'edit':\n            handleEdit();\n            break;\n        case 'add':\n            handleCreate();\n            break;\n    }\n});\n\nfunction handleEdit() {\n    var formObj = Script.getFormByKey(\"companyform\");\n    if (formObj == undefined) {\n        alert(\"Please fill out all required fields\");\n        return;\n    }\n        \n    var dbReq = {};\n    formObj.Id = companyId;\n    formObj.Status = +formObj.Status;\n    let today = new Date();\n    today = Utils.formatDate(today, \"dd/MM/yyyy HH:mm\", false);\n    formObj.UpdatedOn = today;\n    formObj.UpdatedBy = Client.getUser();\n    dbReq[companyId] = formObj;\n        \n    Database.updateRecord(\"rodent\", \"Companies\", dbReq, () => {\n        Client.jumpToScreen(\"Manage Companies\");\n    });\n}\n\nfunction handleCreate() {\n    Database.readRecords(\"rodent\", \"Companies\", function(eventData) {\n        var companyCollection = SensaCollection.load(eventData.value);\n        var formObj = Script.getFormByKey(\"companyform\");\n        \n        if (formObj == undefined) {\n            alert(\"Please fill out all required fields\");\n            return;\n        }\n\n        var dbReq = {};\n        var companyCount = Object.keys(companyCollection.data).length;\n        formObj.Id = `${companyCount + 1}`;\n        formObj.Status = +formObj.Status;\n\n        let today = new Date();\n        today = Utils.formatDate(today, \"dd/MM/yyyy HH:mm\", false);\n        formObj.CreatedOn = today;\n        formObj.UpdatedOn = today;\n        formObj.CreatedBy = Client.getUser();\n        formObj.UpdatedBy = Client.getUser();\n        dbReq[companyCount + 1] = formObj;\n\n        Database.createRecords(\"rodent\", \"Companies\", dbReq, () => {\n            \n            Client.jumpToScreen(\"Manage Companies\");\n        });\n    });\n}"
        },
        "ev": {}
      },
      "Rodent#0": {
        "t": "Rodent",
        "lX": 0,
        "lY": 0,
        "sX": 4.7,
        "sY": 8.42,
        "s": "Device Level",
        "ps": {
          "enabled": true,
          "scalingType": "OK",
          "width": "470px",
          "height": "100%",
          "x": "0px",
          "y": "0%"
        },
        "ver": "190104c190915",
        "z": "100",
        "dis": false,
        "tt": "",
        "a": {},
        "ev": {
          "clientEvents": {
            "inputEvents": {
              "BaitTypes": {
                "channel": "baitTypes/set baitTypes",
                "event": "set baitTypes",
                "important": "false"
              },
              "SetQuantities": {
                "channel": "quantities/set Quantities",
                "event": "set Quantities",
                "important": "false"
              },
              "SetBaits": {
                "channel": "baits/set baits",
                "event": "set baits",
                "important": "false"
              },
              "CleanRodentCotent": {
                "channel": "CleanRodentCotent/clear content",
                "event": "clear content",
                "important": "false"
              },
              "Set Headers": {
                "channel": "SetHeaders/receive headers",
                "event": "receive headers",
                "important": "false"
              },
              "loadTreshold": {
                "channel": "loadTreshold/set thresholds",
                "event": "set thresholds",
                "important": "false"
              },
              "open": {
                "channel": "open/toggle card",
                "event": "toggle card",
                "important": "false"
              },
              "fCard": {
                "channel": "fCard/filter",
                "event": "filter",
                "important": "false"
              },
              "SortBy": {
                "channel": "SortBy/sort",
                "event": "sort",
                "important": "false"
              },
              "changeVisibleCounter": {
                "channel": "changeVisibleCounter/change visible counter",
                "event": "change visible counter",
                "important": "false"
              },
              "view pointer": {
                "channel": "view-pointer-changed/change view pointer",
                "event": "change view pointer",
                "important": "false"
              },
              "open child": {
                "channel": "open-child/toggle child",
                "event": "toggle child",
                "important": "false"
              },
              "toggle card": {
                "channel": "toggleCard/toggle card",
                "event": "toggle card",
                "important": "false"
              },
              "loadChildren": {
                "channel": "loadChildren/receive value",
                "event": "receive value",
                "important": "false"
              },
              "AddBait": {
                "channel": "AddBait/addBait",
                "event": "addBait",
                "important": "false"
              },
              "setDeviceDetails": {
                "channel": "setDeviceDetails/DeviceDetails",
                "event": "DeviceDetails",
                "important": "false"
              },
              "setDeviceErrors": {
                "channel": "setDeviceErrors/DeviceErrorsLoaded",
                "event": "DeviceErrorsLoaded",
                "important": "false"
              }
            },
            "outputEvents": {
              "cleared": {
                "channel": "cleared/receive value",
                "event": "clear trap",
                "trigger": "clear trap",
                "important": "false"
              },
              "test1": {
                "channel": "test1/receive value",
                "event": "address pressed",
                "trigger": "address pressed",
                "important": "false"
              },
              "children populated": {
                "channel": "children-populated/receive value",
                "event": "children populated",
                "trigger": "children populated",
                "important": "false"
              },
              "setTrap": {
                "channel": "setTrap/receive value",
                "event": "set trap",
                "trigger": "set trap",
                "important": "false"
              },
              "ChangeBait": {
                "channel": "ChangeBait/receive value",
                "event": "ChangeBait",
                "trigger": "ChangeBait",
                "important": "false"
              },
              "ChildCardToggled": {
                "channel": "ChildCardToggled/receive value",
                "event": "ChildCardToggled",
                "trigger": "ChildCardToggled",
                "important": "false"
              },
              "DeviceDetails": {
                "channel": "DeviceDetails/receive value",
                "event": "DeviceDetails",
                "trigger": "DeviceDetails",
                "important": "false"
              },
              "Event Transaction": {
                "channel": "EventTransaction/receive value",
                "event": "EventTransaction",
                "trigger": "EventTransaction",
                "important": "false"
              }
            }
          },
          "serverEvents": {
            "inputEvents": {
              "countertotal": {
                "channel": "PESTCO/RODENTS/+/COUNTERTOTAL",
                "event": "history",
                "important": "false"
              },
              "SensorData": {
                "channel": "PESTCO/RODENTS/+/SENSORDATA",
                "event": "feed",
                "important": "false"
              },
              "Packet 2 Enabled": {
                "channel": "PESTCO/RODENTS/+/P2ENABLED",
                "event": "feed",
                "important": "false"
              },
              "SensorDataV3": {
                "channel": "PESTCO/RODENTS/+/SENSORDATA2",
                "event": "feed",
                "important": "false"
              },
              "WEIGHT": {
                "channel": "PESTCO/RODENTS/+/BAITTAKEN",
                "event": "history",
                "important": "false"
              },
              "History": {
                "channel": "PESTCO/RODENTS/+/COUNTERTOTAL",
                "event": "history",
                "important": "false"
              }
            },
            "outputEvents": {
              "New Event #3": {
                "channel": "$NET/EMAIL/SMTPCLIENT/SEND",
                "event": "smtpclient",
                "trigger": "smtpclient",
                "important": "false"
              }
            }
          }
        }
      },
      "popup": {
        "t": "Scripting",
        "lX": 255,
        "lY": 120,
        "sX": 1,
        "sY": 1,
        "s": "Device Level",
        "ps": {
          "enabled": false,
          "scalingType": "NOSCALE",
          "width": "",
          "height": "",
          "x": "",
          "y": ""
        },
        "ver": "200124c190915",
        "vis": false,
        "dis": false,
        "tt": "",
        "a": {
          "script type": "html",
          "code editor": "<div>\n<style>\n   /* Customize the label (the container) */\n        .container {\n            display: block;\n            position: relative;\n            padding-left: 2px;\n            /* padding: 15px; */\n            cursor: pointer;\n            /* font-size: 22px; */\n            -webkit-user-select: none;\n            -moz-user-select: none;\n            -ms-user-select: none;\n            user-select: none;\n        }\n\t\n\t.content {\n    width: 100%;\n    overflow: hidden;\n}\n\n            /* Hide the browser's default checkbox */\n            .container input {\n                position: absolute;\n                opacity: 0;\n                cursor: pointer;\n                height: 0;\n                width: 0;\n            }\n\n        /* Create a custom checkbox */\n        .checkmark {\n            position: absolute;\n            top: 3px;\n            left: 0;\n            height: 15px;\n            width: 15px;\n            background-color: #f2f2f2;\n            border-radius: 2px;\n            border: 2px solid #e57123;\n        }\n\n        /* On mouse-over, add a grey background color */\n        .container:hover input ~ .checkmark {\n            background-color: rgba(247, 152, 89, 0.7);\n        }\n\n        /* When the checkbox is checked, add a blue background */\n        .container input:checked ~ .checkmark {\n            background-color: rgba(245, 129, 51);\n        }\n\n        /* Create the checkmark/indicator (hidden when not checked) */\n        .checkmark:after {\n            content: \"\";\n            position: absolute;\n            display: none;\n        }\n\n        /* Show the checkmark when checked */\n        .container input:checked ~ .checkmark:after {\n            display: block;\n        }\n\n        /* Style the checkmark/indicator */\n        .container .checkmark:after {\n            left: 4px;\n            /* top: 1px; */\n            width: 5px;\n            height: 10px;\n            border: solid white;\n            border-width: 0 3px 3px 0;\n            -webkit-transform: rotate(45deg);\n            -ms-transform: rotate(45deg);\n            transform: rotate(45deg);\n        }\n\n        body {\n            font-family: \"Open Sans\";\n            font-size: 16px;\n            user-select: none;\n            overflow-x: hidden;\n            overflow-y: auto;\n        }\n\n        @font-face {\n            font-family: \"Open Sans\";\n            font-style: normal;\n            font-weight: 400;\n            src: local(\"Open Sans\"), local(\"OpenSans\"), url(\"../fonts/OpenSans400.woff\") format(\"woff\");\n        }\n\n        @font-face {\n            font-family: \"Open Sans\";\n            font-style: normal;\n            font-weight: 700;\n            src: local(\"Open Sans\"), local(\"OpenSans\"), url(\"../fonts/OpenSans700.woff\") format(\"woff\");\n        }\n\n        .noSelect {\n            -webkit-user-select: none;\n            -moz-user-select: none;\n            -ms-user-select: none;\n            user-select: none;\n        }\n\n        #widget {\n            background-color: white;\n        }\n        /* Hide scrollbar for Chrome, Safari and Opera */\n        #container::-webkit-scrollbar {\n            display: none;\n        }\n\n        /* Hide scrollbar for IE, Edge and Firefox */\n        #container {\n            -ms-overflow-style: none; /* IE and Edge */\n            scrollbar-width: none; /* Firefox */\n        }\n\n        #container {\n            position: fixed;\n            height: calc(100% - 2px);\n            border: 1px solid #ddd;\n            border-radius: 3px;\n            overflow: auto;\n        }\n\n        thead th {\n            position: sticky;\n            position: -webkit-sticky;\n            top: 35px;\n            z-index: 999;\n            background-color: #f2f2f2;\n        }\n\n        .selectBtn:hover {\n            color: #000000;\n            text-decoration: none;\n            font-family: sans-serif;\n            background-color: #4d98c2ff;\n            padding: 10px 25px;\n            cursor: pointer;\n            margin: 2%;\n            height: 15px;\n        }\n\n        .btnSelected {\n            border-bottom: 2px solid #4c4c4c;\n            color: #000000;\n            text-decoration: none;\n            font-family: sans-serif;\n            background-color: #4d98c2ff;\n            padding: 10px 25px;\n            cursor: pointer;\n            margin: 2%;\n            height: 15px;\n        }\n\n        .selectBtn {\n            background-color: #6ec4f7ff;\n            /* Green */\n            font-family: sans-serif;\n            margin: 2%;\n            border: none;\n            color: white;\n            padding: 10px 25px;\n            text-align: center;\n            text-decoration: none;\n            display: inline-block;\n            font-size: 1rem;\n            height: 15px;\n            cursor: pointer;\n        }\n\n        table {\n            border-collapse: collapse;\n            table-layout: fixed;\n            border-spacing: 0;\n            width: 100%;\n            max-height: calc(100% - 30px);\n            border: none;\n            bottom: 38px;\n        }\n\n        th {\n            text-transform: capitalize;\n            text-align: left;\n            padding: 5px 0px 5px 0px;\n            margin: 0px 4px 0px 4px;\n            background-color: white;\n            border-bottom: 2px solid #dee2e6;\n        }\n\n        .checkbox-row {\n            height: 1.5rem;\n        }\n\n        td {\n            position: sticky;\n            text-align: left;\n            word-break: break-word;\n            padding: 4px;\n            border-bottom: 1px solid #dee2e6;\n        }\n\n        .barLegend {\n            padding-left: 2%;\n            padding-right: 2%;\n            font-size: 12px;\n            color: white;\n            width: 100%;\n        }\n\n        tr:nth-child(even) {\n            background-color: rgba(0,0,0,.05);\n        }\n\n        tr.selected {\n            background-color: #dff0d8;\n            font-weight: bold /* our pastel green*/\n        }\n\n        .rowHover:hover td {\n            background-color: #fffaf3;\n            /* our pastel yellow*/\n        }\n\n        #searchInp {\n            width: 100px;\n            float: right;\n            height: 25px;\n            text-indent: 4px;\n            font: 14px 'Open Sans';\n            display: none;\n            border-radius: 3px;\n            border-color: lightgray;\n            margin: 4px;\n            padding: .375rem .75rem;\n            font-size: 1rem;\n            line-height: 1.5;\n            color: #495057;\n            background-color: #fff;\n            background-clip: padding-box;\n            border: 1px solid #ced4da;\n            border-radius: .25rem;\n            transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;\n            -webkit-transition: width 0.4s ease-in-out;\n            transition: width 0.4s ease-in-out;\n        }\n\n            /* When the input field gets focus, change its width to 100% */\n            #searchInp:focus {\n                width: 300px;\n            }\n\n        /* Remove blue box around textbox. */\n        input:focus {\n            outline: none;\n        }\n\n        #headerBar {\n            top: 0;\n            z-index: 100;\n            position: sticky;\n            display: none;\n            background-color: #f2f2f2;\n            height: 34px;\n            border-bottom: 1px solid #ddd;\n        }\n\n        #tableTitle {\n            float: left;\n            margin: 6px 0 6px 14px;\n        }\n\n        .headCol {\n            text-overflow: ellipsis;\n            overflow: hidden;\n            white-space: nowrap;\n        }\n\n        /* Status border */\n        .newPhotoBorder {\n            border-right: 5px solid blue;\n        }\n\n        .openCardBorder {\n            border-right: 5px solid black;\n        }\n\n        .normalCardBorder {\n            border-right: 5px solid #f2f2f2;\n        }\n\n        .alertCardBorder {\n            border-right: 5px solid red;\n        }\n\n\n        /* Triggered */\n        .redIcon {\n            background-image: url(\"/userfiles/Animal-Trap-Icon-Red.png\");\n            background-size: contain;\n            background-color: white;\n            border-radius: 5px;\n        }\n\n        /* Inactive */\n        .greyIcon {\n            background-image: url(\"/userfiles/Animal-Trap-Icon-DkGrey.png\");\n            background-size: contain;\n            background-color: white;\n            border-radius: 5px;\n        }\n\n        /* Set  */\n        .greenIcon {\n            background-image: url(\"/userfiles/Animal-Trap-Icon-Green.png\");\n            background-size: contain;\n            background-color: white;\n            border-radius: 5px;\n        }\n\n\n\n        .capitalize {\n            text-transform: capitalize;\n        }\n\n        .button {\n            background-color: #4CAF50;\n            /* Green */\n            font-family: sans-serif;\n            border: none;\n            color: white;\n            padding: 10px 25px;\n            text-align: center;\n            text-decoration: none;\n            display: inline-block;\n            font-size: 1rem;\n            border-radius: 6px;\n            height: 50px;\n            cursor: pointer;\n        }\n\n        .notes-css {\n            cursor: pointer;\n            display: block;\n            font-size: 16px;\n            font-family: sans-serif;\n            font-weight: 700;\n            color: #444;\n            line-height: 1.3;\n            padding: 0.6em 0.8em;\n            width: calc(100% - 16px);\n            max-width: 100%;\n            box-sizing: border-box;\n            margin: 8px;\n            border: 1px solid #aaa;\n            box-shadow: 0 1px 0 1px rgba(0, 0, 0, .04);\n            -moz-appearance: none;\n            -webkit-appearance: none;\n            appearance: none;\n            background-color: #fff;\n            background-repeat: no-repeat, repeat;\n            background-position: right .7em top 50%, 0 0;\n            background-size: .65em auto, 100%;\n        }\n\n            .notes-css::-ms-expand {\n                display: none;\n            }\n\n            .notes-css:hover {\n                border-color: #888;\n            }\n\n            .notes-css:focus {\n                border-color: #aaa;\n                box-shadow: 0 0 1px 3px rgba(59, 153, 252, .7);\n                box-shadow: 0 0 0 3px -moz-mac-focusring;\n                color: #222;\n                outline: none;\n            }\n\n            .notes-css option {\n                font-weight: normal;\n            }\n\n        .select-css {\n            cursor: pointer;\n            display: block;\n            font-size: 16px;\n            font-family: sans-serif;\n            font-weight: 700;\n            color: white;\n            line-height: 1.3;\n            padding: 0.6em 0.8em;\n            width: calc(100% - 16px);\n            max-width: 100%;\n            box-sizing: border-box;\n            margin: 8px;\n            border: 1px solid #aaa;\n            box-shadow: 0 1px 0 1px rgba(0, 0, 0, .04);\n            -moz-appearance: none;\n            -webkit-appearance: none;\n            appearance: none;\n            background-color: rgb(65, 80, 90);\n            background-image: url('data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22292.4%22%20height%3D%22292.4%22%3E%3Cpath%20fill%3D%22%23007CB2%22%20d%3D%22M287%2069.4a17.6%2017.6%200%200%200-13-5.4H18.4c-5%200-9.3%201.8-12.9%205.4A17.6%2017.6%200%200%200%200%2082.2c0%205%201.8%209.3%205.4%2012.9l128%20127.9c3.6%203.6%207.8%205.4%2012.8%205.4s9.2-1.8%2012.8-5.4L287%2095c3.5-3.5%205.4-7.8%205.4-12.8%200-5-1.9-9.2-5.5-12.8z%22%2F%3E%3C%2Fsvg%3E');\n            background-repeat: no-repeat, repeat;\n            background-position: right .7em top 50%, 0 0;\n            background-size: .65em auto, 100%;\n        }\n\n            .select-css::-ms-expand {\n                display: none;\n            }\n\n            .select-css:hover {\n                border-color: #ffffff;\n            }\n\n            .select-css:focus {\n                border-color: #aaa;\n                box-shadow: 0 0 1px 3px rgba(59, 153, 252, .7);\n                box-shadow: 0 0 0 3px -moz-mac-focusring;\n                border-color: #ffffff;\n                outline: none;\n            }\n\n            .select-css option {\n                font-weight: normal;\n            }\n\n        .container {\n            height: 60px;\n            position: relative;\n        }\n\n        .vertical-center {\n            margin: 0;\n            position: absolute;\n            top: 50%;\n            -ms-transform: translateY(-50%);\n            transform: translateY(-50%);\n        }\n\n        ul {\n            margin: 4px 0 4px 0;\n            overflow: hidden;\n            white-space: nowrap;\n        }\n\n        li {\n            white-space: nowrap;\n            overflow: hidden;\n        }\n\n        .mapIcon {\n            float: right;\n            cursor: pointer;\n            font-size: 29px;\n            margin-right: 3%;\n        }\n\n            .mapIcon:hover {\n                float: right;\n                cursor: pointer;\n                font-size: 35px;\n                color: #f58133;\n            }\n\n        .dialText {\n            font-size: 12px;\n        }\n\n        .fullWidth {\n            width: 80%;\n        }\n\n        .container-fluid {\n            margin: 3%;\n        }\n\n        .displayContainer {\n            display: inline-block;\n            text-align: end;\n        }\n\n        .underlineIndicatorLeft {\n            border: 0.1px solid #ffffff;\n            border-radius: 52px;\n            background-color: #ffffff;\n            height: 3px;\n            display: flex;\n            width: 20px;\n            position: relative;\n            left: 0%;\n        }\n\n        .underlineIndicatorRight {\n            border: 0.1px solid #ffffff;\n            border-radius: 52px;\n            background-color: #ffffff;\n            height: 3px;\n            display: flex;\n            width: 20px;\n            position: relative;\n            left: 94%;\n        }\n\n\n\n        .underlineIndicatorCenter {\n            border: 0.1px solid #ffffff;\n            border-radius: 52px;\n            background-color: #ffffff;\n            height: 3px;\n            display: flex;\n            width: 20px;\n            position: relative;\n            left: 46%;\n        }\n\n        @media screen and (max-width: 1440px) {\n            .underlineIndicatorLeft {\n                border: 0.1px solid #ffffff;\n                border-radius: 52px;\n                background-color: #ffffff;\n                height: 3px;\n                display: flex;\n                width: 20px;\n                position: relative;\n                left: 0%;\n            }\n\n            .underlineIndicatorRight {\n                border: 0.1px solid #ffffff;\n                border-radius: 52px;\n                background-color: #ffffff;\n                height: 3px;\n                display: flex;\n                width: 20px;\n                position: relative;\n                left: 89%;\n            }\n\n\n\n            .underlineIndicatorCenter {\n                border: 0.1px solid #ffffff;\n                border-radius: 52px;\n                background-color: #ffffff;\n                height: 3px;\n                display: flex;\n                width: 20px;\n                position: relative;\n                left: 44%;\n            }\n        }\n\n        @media screen and (max-width: 1024px) {\n            .underlineIndicatorLeft {\n                border: 0.1px solid #ffffff;\n                border-radius: 52px;\n                background-color: #ffffff;\n                height: 3px;\n                display: flex;\n                width: 20px;\n                position: relative;\n                left: 0%;\n            }\n\n            .underlineIndicatorRight {\n                border: 0.1px solid #ffffff;\n                border-radius: 52px;\n                background-color: #ffffff;\n                height: 3px;\n                display: flex;\n                width: 20px;\n                position: relative;\n                left: 84%;\n            }\n\n\n\n            .underlineIndicatorCenter {\n                border: 0.1px solid #ffffff;\n                border-radius: 52px;\n                background-color: #ffffff;\n                height: 3px;\n                display: flex;\n                width: 20px;\n                position: relative;\n                left: 43%;\n            }\n        }\n\n\n        @media screen and (max-width: 768px) {\n            .underlineIndicatorLeft {\n                border: 0.1px solid #ffffff;\n                border-radius: 52px;\n                background-color: #ffffff;\n                height: 3px;\n                display: flex;\n                width: 20px;\n                position: relative;\n                left: 0%;\n            }\n\n            .underlineIndicatorRight {\n                border: 0.1px solid #ffffff;\n                border-radius: 52px;\n                background-color: #ffffff;\n                height: 3px;\n                display: flex;\n                width: 20px;\n                position: relative;\n                left: 78%;\n            }\n\n\n\n            .underlineIndicatorCenter {\n                border: 0.1px solid #ffffff;\n                border-radius: 52px;\n                background-color: #ffffff;\n                height: 3px;\n                display: flex;\n                width: 20px;\n                position: relative;\n                left: 40%;\n            }\n        }\n\n        @media screen and (max-width: 425px) {\n            .underlineIndicatorLeft {\n                border: 0.1px solid #ffffff;\n                border-radius: 52px;\n                background-color: #ffffff;\n                height: 3px;\n                display: flex;\n                width: 9px;\n                position: relative;\n                left: 0%;\n            }\n\n            .underlineIndicatorRight {\n                border: 0.1px solid #ffffff;\n                border-radius: 52px;\n                background-color: #ffffff;\n                height: 3px;\n                display: flex;\n                width: 9px;\n                position: relative;\n                left: 78%;\n            }\n\n\n\n            .underlineIndicatorCenter {\n                border: 0.1px solid #ffffff;\n                border-radius: 52px;\n                background-color: #ffffff;\n                height: 3px;\n                display: flex;\n                width: 9px;\n                position: relative;\n                left: 40%;\n            }\n        }\n\n        @media screen and (max-width: 375px) {\n            .underlineIndicatorLeft {\n                border: 0.1px solid #ffffff;\n                border-radius: 52px;\n                background-color: #ffffff;\n                height: 3px;\n                display: flex;\n                width: 9px;\n                position: relative;\n                left: 0%;\n            }\n\n            .underlineIndicatorRight {\n                border: 0.1px solid #ffffff;\n                border-radius: 52px;\n                background-color: #ffffff;\n                height: 3px;\n                display: flex;\n                width: 9px;\n                position: relative;\n                left: 74%;\n            }\n\n\n\n            .underlineIndicatorCenter {\n                border: 0.1px solid #ffffff;\n                border-radius: 52px;\n                background-color: #ffffff;\n                height: 3px;\n                display: flex;\n                width: 9px;\n                position: relative;\n                left: 38%;\n            }\n        }\n\n\n\n        @media screen and (max-width: 320px) {\n            .underlineIndicatorLeft {\n                border: 0.1px solid #ffffff;\n                border-radius: 52px;\n                background-color: #ffffff;\n                height: 3px;\n                display: flex;\n                width: 9px;\n                position: relative;\n                left: 0%;\n            }\n\n            .underlineIndicatorRight {\n                border: 0.1px solid #ffffff;\n                border-radius: 52px;\n                background-color: #ffffff;\n                height: 3px;\n                display: flex;\n                width: 9px;\n                position: relative;\n                left: 70%;\n            }\n\n\n\n            .underlineIndicatorCenter {\n                border: 0.1px solid #ffffff;\n                border-radius: 52px;\n                background-color: #ffffff;\n                height: 3px;\n                display: flex;\n                width: 9px;\n                position: relative;\n                left: 35%;\n            }\n        }\n\n        .UnderlineGreen {\n            width: 100%;\n            border: 3px solid #388b3d;\n            border-radius: 52px;\n            margin-top: 3.7px;\n            margin-bottom: 3.7px;\n            background-color: #388b3d;\n        }\n\n        .UnderlineOrange {\n            width: 100%;\n            border: 3px solid #f88924ff;\n            border-radius: 52px;\n            margin-top: 3.7px;\n            margin-bottom: 3.7px;\n            background-color: #f88924ff;\n        }\n\n        .UnderlineRed {\n            width: 100%;\n            border: 3px solid #d74423ff;\n            border-radius: 52px;\n            margin-top: 3.7px;\n            margin-bottom: 3.7px;\n            background-color: #d74423ff;\n        }\n\n        .UnderlineGray {\n            width: 100%;\n            border: 3px solid gray;\n            border-radius: 52px;\n            margin-top: 3.7px;\n            margin-bottom: 3.7px;\n            background-color: gray;\n        }\n\n        .LabelStyle {\n            font-size: 7.5px;\n            justify-content: center;\n            display: inline-flex;\n        }\n\n        .SideBarGray {\n            border-left: 8px solid gray;\n        }\n\n        .SideBarGreen {\n            border-left: 8px solid green;\n        }\n\n        .SideBarYellow {\n            border-left: 8px solid orange;\n        }\n\n        .SideBarRed {\n            border-left: 8px solid red;\n        }\n\n        .StatusIndicator {\n            float: right;\n            font-size: 10px;\n        }\n\n        .ValueStyle {\n            font-size: 15.5px;\n            font-weight: bold;\n            color: #41505aff;\n        }\n\n        .tabBtn {\n            text-align: center;\n            width: 50%;\n            padding-left: 10%;\n            padding-right: 10%;\n            padding-top: 15px;\n            padding-bottom: 15px;\n            font-family: sans-serif;\n            background-color: rgb(230 230 230);\n            border: none;\n            color: #41505a;\n            padding: 10px 25px;\n            text-align: center;\n            text-decoration: none;\n            font-size: 1rem;\n            cursor: pointer;\n        }\n\n            .tabBtn:hover {\n                text-align: center;\n                width: 50%;\n                padding-left: 10%;\n                padding-right: 10%;\n                padding-top: 15px;\n                padding-bottom: 15px;\n                font-family: sans-serif;\n                background-color: #4d98c2;\n                border: none;\n                color: white;\n                padding: 10px 25px;\n                text-align: center;\n                text-decoration: none;\n                font-size: 1rem;\n                cursor: pointer;\n            }\n\n        .tabBtnSelected {\n            text-align: center;\n            width: 50%;\n            padding-left: 10%;\n            padding-right: 10%;\n            padding-top: 15px;\n            padding-bottom: 15px;\n            font-family: sans-serif;\n            background-color: #4d98c2;\n            border: none;\n            color: white;\n            padding: 10px 25px;\n            text-align: center;\n            text-decoration: none;\n            font-size: 1rem;\n            cursor: pointer;\n        }\n\n        .normalCardBorder {\n            background-color: #e6e6e6ff;\n        }\n\n            .normalCardBorder:hover {\n                background-color: #f2f2f2\n            }\n\n\n        [data-info=\"chart\"] {\n            padding: 20px;\n        }\n\n            [data-info=\"chart\"] table {\n                width: 100%;\n                height: 400px;\n            }\n\n        .charttitle {\n            text-align: center;\n        }\n\n        .bars {\n            color: white;\n            font-size: 13px;\n            text-align: center;\n        }\n\n            .bars td {\n                text-align: center;\n                vertical-align: bottom;\n            }\n\n            .bars div:hover {\n                opacity: 0.6;\n            }\n\n        .legend {\n            vertical-align: bottom;\n            padding-left: 20px;\n            text-align: left;\n        }\n\n        .legbox {\n            display: block;\n            clear: both;\n        }\n\n        .xaxisname {\n            margin: 5px;\n            color: #fff;\n            font-size: 77%;\n            padding: 5px;\n            float: left;\n        }\n\n\n        /*Flat UI colors*/\n\n        .one {\n            background: #16A085;\n        }\n\n        .two {\n            background: #2ECC71;\n        }\n\n        .three {\n            background: #27AE60;\n        }\n\n        .four {\n            background: #3498DB;\n        }\n\n        .five {\n            background: #2980B9;\n        }\n\n        .six {\n            background: #9B59B6;\n        }\n\n        .seven {\n            background: #8E44AD;\n        }\n\n        .eight {\n            background: #34495E;\n        }\n\n        .nine {\n            background: #2C3E50;\n        }\n\n        .ten {\n            background: #22313f;\n        }\n\n        .eleven {\n            background: #F1C40F;\n        }\n\n        .twelve {\n            background: #F39C12;\n        }\n\n        .thirteen {\n            background: #E67E22;\n        }\n\n        .fourteen {\n            background: #D35400;\n        }\n\n        .fifteen {\n            background: #E74C3C;\n        }\n\n        .sixteen {\n            background: #C0392B;\n        }\n\n        .seventeen {\n            background: #ECF0F1;\n        }\n\n            .seventeen.clouds {\n                color: #BDC3C7;\n            }\n\n        .eighteen {\n            background: #BDC3C7;\n        }\n\n        .nineteen {\n            background: #95A5A6;\n        }\n\n        .twenty {\n            background: #7F8C8D;\n        }\n\n        .barColor {\n            background-color: #6ec4f7ff;\n        }\n\n            .barColor:hover {\n                background-color: #4d98c2;\n                cursor: pointer;\n            }\n\n        .flex {\n            display: -webkit-box; /* OLD - iOS 6-, Safari 3.1-6, BB7 */\n            display: -ms-flexbox; /* TWEENER - IE 10 */\n            display: -webkit-flex; /* NEW - Safari 6.1+. iOS 7.1+, BB10 */\n            display: flex; /* NEW, Spec - Firefox, Chrome, Opera */\n            flex: 1;\n            display: flex;\n            flex-direction: row;\n            align-items: flex-start;\n            -webkit-display: flex;\n            -webkit-flex-direction: row;\n            -webkit-align-items: flex-start;\n        }\n\n        .labelChild {\n            width: 100%;\n        }\n\n        @supports (overflow:-webkit-marquee) and (justify-content:inherit) {\n            .flex {\n                display: -webkit-flex; /* NEW - Safari 6.1+. iOS 7.1+, BB10 */\n                flex: 1;\n                flex-direction: row;\n                align-items: flex-start;\n            }\n        }\n\n        .iconWidth {\n            width: 5%;\n        }\n\n        @media screen and (max-width: 2560px) {\n            .CardWidth {\n                width: 99.5%;\n            }\n\n            .setupContent {\n                width: 45%;\n                display: grid;\n                margin-left: 3%;\n            }\n        }\n\n        @media screen and (max-width: 1504px) {\n            .CardWidth {\n                width: 99%;\n            }\n\n            .setupContent {\n                width: 45%;\n                display: grid;\n                margin-left: 3.5%;\n            }\n        }\n\n        @media screen and (max-width: 1404px) {\n            .CardWidth {\n                width: 99%;\n            }\n\n            .setupContent {\n                width: 45%;\n                display: grid;\n                margin-left: 5.5%;\n            }\n        }\n\n\n        @media screen and (max-width: 868px) {\n            .CardWidth {\n                width: 99%;\n            }\n\n            .setupContent {\n                width: 38%;\n                display: grid;\n                margin-left: 7%;\n            }\n\n            .labelChild {\n                width: 100%;\n                font-size: 7px;\n            }\n        }\n\n\n        @media screen and (max-width: 722px) {\n            .CardWidth {\n                width: 99%;\n            }\n\n            .setupContent {\n                width: 38%;\n                display: grid;\n                margin-left: 8%;\n            }\n\n            .labelChild {\n                width: 100%;\n                font-size: 7px;\n            }\n        }\n\n\n        @media screen and (max-width: 427px) {\n            .labelChild {\n                width: 100%;\n                font-size: 4px;\n            }\n\n            .CardWidth {\n                width: 97%;\n            }\n\n            .setupContent {\n                width: 38%;\n                display: grid;\n                margin-left: 14%;\n            }\n        }\n\n        @media screen and (max-width: 320px) {\n            .labelChild {\n                width: 100%;\n                font-size: 4px;\n            }\n\n            .CardWidth {\n                width: 97%;\n            }\n\n            .setupContent {\n                width: 33%;\n                display: grid;\n                margin-left: 15%;\n            }\n        }\n\n\t  .normalCardBorder{\n\t\tpadding: 2%;\n\t\tborder-right: 5px solid #e6e6e6ff;\n\t  }\n</style>\n<div class=\"main\" data-info=\"SideBarStatus\"  onclick=\"fw.fireEvent('custom popup pressed', this.querySelector('[data-value=\\'id\\']').innerHTML);\">\n     <div data-section=\"cell\">\n                <div>\n                    <div class=\"container flex\" style=\"margin: 8px 8px 4px 0;  \">\n\n                        <!--<div data-info=\"SideBarStatus\" class=\"SideBarGreen\">\n\n                        </div>-->\n                        <!--Dummy Trap Icon start-->\n                        <div style=\"border-right: 0.98px solid #9b9b9bff;width:99%;\">\n                            <svg xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n                                 xmlns:cc=\"http://creativecommons.org/ns#\"\n                                 xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n                                 xmlns:svg=\"http://www.w3.org/2000/svg\"\n                                 xmlns=\"http://www.w3.org/2000/svg\"\n                                 id=\"svg29831\"\n                                 version=\"1.1\"\n                                 viewBox=\"0 0 16.933333 16.933333\"\n                                 height=\"40\"\n                                 width=\"40\"\n                                 data-info=\"iconDummy\"\n                                 style=\"margin-top: 12px; display:none;\">\n                                <g id=\"g25716\" transform=\"matrix(0.35356524,0,0,-0.35271157,-872.43975,177.40608)\">\n                                    <g transform=\"translate(2609.6979,-736.76742)\" id=\"g9647-9-8-80\">\n                                        <path id=\"path6880-7-3-8-0-4-0\" d=\"m -97.915822,1213.08 v -17.9842 H -138.3176 v 40.8342 h 40.031118 v -6.7954\" style=\"fill:none;stroke:#41505a;stroke-width:7.5;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"></path>\n                                    </g>\n                                    <path transform=\"scale(1,-1)\" style=\"opacity:1;fill:#41505a;fill-opacity:1;stroke:#41505a;stroke-width:2.27642;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" id=\"path24990-4\" d=\"m 2493.9189,-478.74548 a 2.3376312,2.3376312 0 0 1 -2.3298,2.33761 2.3376312,2.3376312 0 0 1 -2.3454,-2.32197 2.3376312,2.3376312 0 0 1 2.3141,-2.35316 2.3376312,2.3376312 0 0 1 2.3609,2.30622 l -2.3374,0.0313 z\"></path>\n                                </g>\n                            </svg>\n                            <!--Dummy Trap Icon end-->\n                            <!--Smart Trap Icon start-->\n                            <svg data-info=\"iconSmart\"\n                                 style=\"margin-top: 12px; display:none;\"\n                                 xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n                                 xmlns:cc=\"http://creativecommons.org/ns#\"\n                                 xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n                                 xmlns:svg=\"http://www.w3.org/2000/svg\"\n                                 xmlns=\"http://www.w3.org/2000/svg\"\n                                 id=\"svg29831\"\n                                 version=\"1.1\"\n                                 viewBox=\"0 0 16.933333 16.933333\"\n                                 height=\"40\"\n                                 width=\"40\">\n                                <defs id=\"defs29825\" />\n\n                                <g transform=\"translate(0,-280.06667)\" id=\"layer1\">\n                                    <g transform=\"matrix(0.99308565,0,0,0.99308565,-104.14524,81.741953)\" id=\"g25310\">\n                                        <path id=\"path24992\" d=\"m 110.9523,208.5002 c 0.19067,-1.56225 1.18424,-2.13723 2.4862,-2.2128\" style=\"fill:none;fill-opacity:1;stroke:#41505a;stroke-width:0.84635907;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n                                        <g transform=\"matrix(0.35277777,0,0,-0.35277777,216.07457,636.91667)\" id=\"g7816-3-6-0-8-5\">\n                                            <path id=\"path6880-5-6-9-2-2\" d=\"m -270.79532,1212.4821 v -17.9842 h -40.40178 v 40.8342 h 40.03112 v -6.7954\" style=\"fill:none;stroke:#41505a;stroke-width:7.5;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n                                        </g>\n                                        <path style=\"opacity:1;fill:#41505a;fill-opacity:1;stroke:#41505a;stroke-width:0.80306929;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" id=\"path24990-5\" d=\"m 114.24228,208.69815 a 0.82466435,0.82466435 0 0 1 -0.8219,0.82466 0.82466435,0.82466435 0 0 1 -0.82741,-0.81914 0.82466435,0.82466435 0 0 1 0.81637,-0.83014 0.82466435,0.82466435 0 0 1 0.83287,0.81358\" />\n                                        <path style=\"fill:none;fill-opacity:1;stroke:#41505a;stroke-width:1.03047788;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" d=\"m 109.27007,208.23222 c 0.16348,-0.94022 0.45971,-1.66746 0.85972,-2.21848 0.75304,-1.03726 1.87392,-1.45007 3.16954,-1.48368\" id=\"path24992-1-6\" />\n                                    </g>\n                                </g>\n                            </svg>\n                            <!--Smart Trap Icon end-->\n                            <!--Smart Trap Error Icon start-->\n                            <svg xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n                                 xmlns:cc=\"http://creativecommons.org/ns#\"\n                                 xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n                                 xmlns:svg=\"http://www.w3.org/2000/svg\"\n                                 xmlns=\"http://www.w3.org/2000/svg\"\n                                 id=\"svg29831\"\n                                 version=\"1.1\"\n                                 viewBox=\"0 0 16.933333 16.933333\"\n                                 height=\"40\"\n                                 width=\"40\"\n                                 data-info=\"iconSmartError\"\n                                 style=\"margin-top: 12px; display:none;\">\n\n\n                                <g id=\"g8372\" transform=\"translate(-161.98269,-24.891438)\">\n                                    <path style=\"fill:none;stroke:#41505a;stroke-width:2.64854;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" d=\"m 177.57657,34.252709 v 6.343234 H 163.2919 V 26.193249 h 14.15362 v 2.396816\" id=\"path6880-7-3-8-0-4-0-8-2\"></path>\n                                    <path style=\"opacity:1;fill:#d74423;fill-opacity:1;stroke:#d74423;stroke-width:0.80389;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" id=\"path24990-4-4-5\" d=\"m 171.5802,33.613804 a 0.82650512,0.82450956 0 0 1 -0.82374,0.824505 0.82650512,0.82450956 0 0 1 -0.82925,-0.818986 0.82650512,0.82450956 0 0 1 0.81818,-0.829987 0.82650512,0.82450956 0 0 1 0.83473,0.813431 l -0.82643,0.01104 z\"></path>\n                                    <path style=\"fill:#000000;fill-opacity:0;stroke:#d74423;stroke-width:2.03333;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" d=\"m 170.76591,31.121397 -0.0244,-2.082158\" id=\"path5448-9-8-5-3-9-4-6-7-4-7-9-0\"></path>\n                                </g>\n\n                            </svg>\n                            <!--Smart Trap Error Icon end-->\n                            <!--Smart Trap No Signal Icon start-->\n                            <svg xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n                                 xmlns:cc=\"http://creativecommons.org/ns#\"\n                                 xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n                                 xmlns:svg=\"http://www.w3.org/2000/svg\"\n                                 xmlns=\"http://www.w3.org/2000/svg\"\n                                 id=\"svg29831\"\n                                 version=\"1.1\"\n                                 viewBox=\"0 0 16.933333 16.933333\"\n                                 height=\"40\"\n                                 width=\"40\"\n                                 data-info=\"iconSmartNoSignal\"\n                                 style=\"margin-top: 12px; display:none;\">\n\n                                <g id=\"g9056\" transform=\"matrix(1.0067255,0,0,1,-118.44967,13.27514)\">\n                                    <g id=\"g7816-3-6-0-8-5-0\" transform=\"matrix(0.35033854,0,0,-0.35033854,228.02635,420.82483)\">\n                                        <path style=\"fill:none;stroke:#41505a;stroke-width:7.5;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" d=\"m -270.79532,1212.4821 v -17.9842 h -40.40178 v 40.8342 h 40.03112 v -6.7954\" id=\"path6880-5-6-9-2-2-6\"></path>\n                                    </g>\n                                    <g id=\"g9048\">\n                                        <path id=\"path24992-2\" d=\"m 123.63093,-4.6294193 c 0.18935,-1.551448 1.17605,-2.122453 2.46901,-2.1975\" style=\"fill:none;fill-opacity:1;stroke:#d74423;stroke-width:0.840507;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"></path>\n                                        <path style=\"opacity:1;fill:#d74423;fill-opacity:1;stroke:#d74423;stroke-width:0.797517;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" id=\"path24990-5-3\" d=\"m 126.89816,-4.4328383 a 0.81896233,0.81896233 0 0 1 -0.81622,0.818958 0.81896233,0.81896233 0 0 1 -0.82169,-0.813476 0.81896233,0.81896233 0 0 1 0.81073,-0.8244 0.81896233,0.81896233 0 0 1 0.82711,0.807954\"></path>\n                                        <path style=\"fill:none;fill-opacity:1;stroke:#d74423;stroke-width:1.02335;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" d=\"m 121.96033,-4.8955463 c 0.16235,-0.933719 0.45653,-1.655931 0.85377,-2.203141 0.74784,-1.030088 1.86097,-1.440044 3.14763,-1.473421\" id=\"path24992-1-6-7\"></path>\n                                    </g>\n                                </g>\n                            </svg>\n                            <!--Smart Trap No Signal Icon start-->\n                            <!--<div data-info=\"icon\" class=\"redIcon vertical-center\" style=\"display: inline-block; width: 25px; height: 25px;\"></div>-->\n                             <div class=\"vertical-center setupContent\" style=\"width: 100%;\">\n\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t<span data-value=\"Status\" style=\"margin-right: 6px;\" class=\"capitalize StatusIndicator\"></span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t<span data-value=\"Status\" style=\"margin-right: 6px;\" class=\"capitalize StatusIndicator\"></span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t<div data-value=\"DeviceNumber\" class=\"capitalize\" style=\"font-weight: bold;font-size: 12.5px;display: flex;width: 100%;\">--</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t<div data-value=\"BaitName\" style=\"display: flex;word-wrap:break-word;font-size: 10.5px;width: 100%;\">--</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t <div class=\"row\">\n\t\t\t\t\t\t\t\t<div data-value=\"battery\" style=\"display: block;word-wrap:break-word;font-size: 10.5px;\">--</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n                        </div>\n\n                         \n                </div>\n            </div>\n</div>\n</div>"
        },
        "ev": {}
      },
      "BaitBoxController": {
        "t": "Scripting",
        "lX": 180,
        "lY": 220,
        "sX": 1,
        "sY": 1,
        "s": "Device Level",
        "ps": {
          "enabled": false,
          "scalingType": "OK",
          "width": "5.74%",
          "height": "11.88%",
          "x": "10.33%",
          "y": "26.13%"
        },
        "ver": "200124c190915",
        "vis": false,
        "dis": false,
        "tt": "",
        "a": {
          "script type": "javascript",
          "code editor": "//# sourceURL=dynamic-script.js\n/**\n * Description: \n * Create Kristifor Milchev\n * Modified Author/Date Date: \n * Version: \n */\n\n/**\n * Initialise script state (run once at startup)\n */\n var Sites= [];\n var ActiveDataSource;\n var DefaultFloor;\n var Packet;\n var selectedLevel;\n var _initializer;\n var _handleGeneric;\n var _publishCommand;\n var _gotoPage;\n var activeFilter;\n var persistence;\n var _UpdatePersistance;\n \n \n Script.on('init', function() {\n     ClientEvents.publish(\"animals\", [\"Fox\", \"Wild hog\", \"Dog\", \"Deer\", \"Feral Cat\"]);\n \n \n \n });\n Script.on('load', function() {\n       \n\t \n\t debugger\n     var seleceted = Script.getState(\"OldState\");\n \n\t \n       \n     DefaultFloor = \"Floor 1\";\n \n     ClientEvents.publish(\"CleanRodentCotent\", \"\",false);\t\n\n     LoadSites([]);\n\n\t Script.setState(\"EnableProvisioning\", \"True\");\n\n });\n\nClientEvents.subscribe(\"ChildCardToggled\", function(data) \n{\n\t\n\tClientEvents.publish(\"devsel\", data.value);\n});\n\n ClientEvents.subscribe(\"LoadCardTraps\", function(data) \n {\n     LoadDevices(data,\"Floor 1\");\n });\n  \n ClientEvents.subscribe(\"FloorSelected\", function(data) \n {\n      \n     var bindingData = SetActiveFloorData(ActiveDataSource, data.value); \n     Packet.value.data = bindingData;\n     ClientEvents.publish(\"test\", Packet);\n });\n \n ClientEvents.subscribe(\"BackToAreas\", function(data) \n {\n     \n      fw.func(\"JUMPSCREEN\", \"Levels\");\n });\n \n ClientEvents.subscribe(\"children-populated\", function(data) \n {\n       \n     var getSelectedBarcodeId = Script.getState(\"barcodeId\");\n     if(getSelectedBarcodeId !== null && getSelectedBarcodeId !== undefined || getSelectedBarcodeId === \"0\")\n     {\n         ClientEvents.publish(\"open-child\", getSelectedBarcodeId);\n     }\n });\n ClientEvents.subscribe(\"ChildCardToggled\", function(data) \n{\n\t\n\tClientEvents.publish(\"devsel\", data.value);\n});\n\nClientEvents.subscribe(\"ChangeBait\", function(data) \n{\n\t \n\t\n \tvar id = data.value.ID;\n\t  var compoundQeury = [\n     {\n         \"TableName\" : \"Devices\", // Specify the primary table used to construct the join request\n          \"Columns\" :\n         [\n             \"Id\",\n             \"DeviceRange\", \n             \"FullRange\",\n             \"BaitEnalbed\"\n             \n\t\t\t \n         ],\n         \"Filters\" : // Filter options in case they are needed.\n         [\n             {\n                 \"Column\" : \"Id\", //Column that will be applied (don't include table name will be resolved if its contained within the reference table.\n                 \"ParamName\" : \"Id\", // Parameter name, must be unique and should not contain $ as its resolved by the mapper. \n                 \"Value\": id // Value that you want to pass for comparison (any object)\n             }\t\n         ],\n          \n     }];\n     \n     \n     Database.readCompound(\"rodent\",\"Devices\",compoundQeury, function(packet)\t\t\t\t\t \n     {\t\n           \n\t\t  var current;\n\t\t  for(var item in packet.value.data)\n\t\t  {\n\t\t\t  var current = packet.value.data[item];\n\t\t  }\n\t\t var resultValue= {\n\t\t\tEvent: data.value.Event,\n\t\t\tID: data.value.ID,\n\t\t\tForm: data.value.form,\n\t\t\tDeviceRange:current[1],\n            FullRange:current[2],\n            BaitEnalbed:current[3]\n\t\t };\n\t\t ClientEvents.publish(\"AddBait\", resultValue);\n     }); \n\t\n\t//ClientEvents.publish(\"devsel\", data.value);\n});\n \nClientEvents.subscribe(\"DeviceDetails\", function(data) \n{\n\t \n\t \n \tvar id = data.value;\n    var compoundQeury = [\n     {\n         \"TableName\" : \"Devices\", // Specify the primary table used to construct the join request\n          \"Columns\" :\n         [\n             \"Id\",\n             \"DeviceRange\", \n             \"PacketType\",\n             \"P1Weight\",\n             \"P2Weight\",\n             \"RebaitRange\",\n             \"L1\",\n             \"L2\",\n             \"PState\"\n\t\t\t \n         ],\n         \"Filters\" : // Filter options in case they are needed.\n         [\n             {\n                 \"Column\" : \"Id\", //Column that will be applied (don't include table name will be resolved if its contained within the reference table.\n                 \"ParamName\" : \"Id\", // Parameter name, must be unique and should not contain $ as its resolved by the mapper. \n                 \"Value\": id // Value that you want to pass for comparison (any object)\n             }\t\n         ],\n          \n     }];\n     \n     \n     Database.readCompound(\"rodent\",\"Devices\",compoundQeury, function(packet)\t\t\t\t\t \n     {\t\n         \n        var current;\n        for(var item in packet.value.data)\n        {\n            var current = packet.value.data[item];\n        }\n        var resultValue= {\n            ID: id,\n            DeviceRange:current[1],\n            PacketType:current[2],\n            P1Weight:current[3],\n            P2Weight:current[4],\n            RebaitRange:current[5],\n            L1:current[6],\n            L2:current[7],\n            PState:current[8]\n        };\n        ClientEvents.publish(\"setDeviceDetails\", resultValue);\n     }); \n\n     \n        var errorCodeQuery = [{\n            Sql: \"select it.Id, it.DeviceId, it.IssueId, it.CreatedAt, ec.Description, tf.FileLocation from ErrorTransactions it join ErrorCodes ec on it.IssueId = ec.Id left join TroubleshootingFiles tf on tf.Id = ec.TroubleshootingHelp where it.DeviceId = $DeviceId AND it.IsActive = $isActive\",\n            Data: [\n                {\n                    Column: \"$DeviceId\",\n                    value: id\n                },\n                {\n                    Column: \"$isActive\",\n                    value: '1'\n                }\n            ]\n        }];\n        Database.ReadRecordsParam(\"Rodent\",\"ErrorTransactions\",errorCodeQuery, function (packet){\n             \n            var current;\n            var result = [];\n            for(var item in packet.value.data)\n            {\n                var current = packet.value.data[item];\n                result.push({\n                    Id: current[0],\n                    IssueId:current[2],\n                    CreatedAt:current[3],\n                    Description:current[4],\n\t\t\t\t\tTroubleshootingHelp: current[5]\n                });\n            }\n            ClientEvents.publish(\"setDeviceErrors\",result);\n        });\n\n\t//ClientEvents.publish(\"devsel\", data.value);\n});\n\n function LoadSites(sites)\n {\n      \n     var filters = [];\n     for(var site in sites)\n     {\n         var siteID = sites[site];\n         filters.push({\n             \"Column\" : \"Id\", //Column that will be applied (don't include table name will be resolved if its contained within the reference table.\n             \"ParamName\" : \"Location\"+siteID, // Parameter name, must be unique and should not contain $ as its resolved by the mapper. \n             \"Value\": siteID // Value that you want to pass for comparison (any object)\n         });\n         \n     }\n     var compoundQeury = [\n     {\n         \"TableName\" : \"Locations\", // Specify the primary table used to construct the join request\n          \"Columns\" :\n         [\n\t\t\t  \"Id\",\n\t\t\t  \"Name\", \n\t\t\t  \"Description\"\n              \n         ], // Specify the list of columns to take from the reference table.\n         \"JoinOn\": [\"Locations\"],\t\t\n         \"CompoundTables\" : // List of tables that you want joined over the reference table (Takes in a List<CompoundTable> etc the current structure for a lever of inheritence.\n         [\n             {\n                 \"Columns\": [\"count(*)\"],\n                 \"TableName\": \"Advisories\",\n                 \"CustomName\": \"Urgent\",\n                 \"JoinTable\":\"Advisories\",\n                 \"Filters\":[\n                     {\n                         \"Column\" : \"LocationId\", \n                         \"ParamName\" : \"Parent1\",  \n                         \"Value\": \"Locations.Id\",\n                         \"IsParentRelated\": true\n                     },\n                     {\n                         \"Column\" : \"AdvisoryType\", \n                         \"ParamName\" : \"AdvisoryType1\",  \n                         \"Value\": 1,\n                         \"IsParentRelated\": false\n                     },\n                     {\n                         \"Column\" : \"Status\", \n                         \"ParamName\" : \"Status1\",  \n                         \"Value\": \"1\",\n                         \"IsParentRelated\": false\n                     },\n                 ]\n             },\n             {\n                 \"Columns\": [\"count(*)\"],\n                 \"TableName\": \"Advisories\",\n                 \"CustomName\": \"Important\",\n                 \"JoinTable\":\"Advisories\",\n                 \"Filters\":[\n                     {\n                         \"Column\" : \"LocationId\", \n                         \"ParamName\" : \"\",  \n                         \"Value\": \"Locations.Id\",\n                         \"IsParentRelated\": true\n                     },\n                     {\n                         \"Column\" : \"AdvisoryType\", \n                         \"ParamName\" : \"AdvisoryType2\",  \n                         \"Value\": 2,\n                         \"IsParentRelated\": false\n                     },\n                     {\n                         \"Column\" : \"Status\", \n                         \"ParamName\" : \"Status2\",  \n                         \"Value\": \"1\",\n                         \"IsParentRelated\": false\n                     },\n                 ]\n             },\n             {\n                 \"Columns\": [\"count(*)\"],\n                 \"TableName\": \"Advisories\",\n                 \"CustomName\": \"Minor\",\n                 \"JoinTable\":\"Advisories\",\n                 \"Filters\":[\n                     {\n                         \"Column\" : \"LocationId\", \n                         \"ParamName\" : \"Parent3\",  \n                         \"Value\": \"Locations.Id\",\n                         \"IsParentRelated\": true\n                     },\n                     {\n                         \"Column\" : \"AdvisoryType\", \n                         \"ParamName\" : \"AdvisoryType3\",  \n                         \"Value\": 3,\n                         \"IsParentRelated\": false\n                     },\n                     {\n                         \"Column\" : \"Status\", \n                         \"ParamName\" : \"Status3\",  \n                         \"Value\": \"1\",\n                         \"IsParentRelated\": false\n                     },\n                     \n                 ]\n             },\n             {\n                 \"Columns\": [\"count(*)\"],\n                 \"TableName\": \"Devices\",\n                 \"CustomName\": \"Danger\",\n                 \"JoinTable\":\"Devices\",\n                 \"Filters\":[\n                     {\n                         \"Column\" : \"Devices.LocationId\", \n                         \"ParamName\" : \"Parent4\",  \n                         \"Value\": \"Locations.Id\",\n                         \"IsParentRelated\": true\n                     },\n                      \n                     {\n                         \"Column\" : \"State\", \n                         \"ParamName\" : \"State1\",  \n                         \"Value\": 3,\n                         \"IsParentRelated\": false\n                     },\n                 ]\n             },\n             {\n                 \"Columns\": [\"count(*)\"],\n                 \"TableName\": \"Devices\",\n                 \"CustomName\": \"Attention\",\n                 \"JoinTable\":\"Devices\",\n                 \"Filters\":[\n                     {\n                         \"Column\" : \"Devices.LocationId\", \n                         \"ParamName\" : \"Parent5\",  \n                         \"Value\": \"Locations.Id\",\n                         \"IsParentRelated\": true\n                     },\n                  \n                     {\n                         \"Column\" : \"State\", \n                         \"ParamName\" : \"State2\",  \n                         \"Value\": 4,\n                         \"IsParentRelated\": false\n                     },\n                 ]\n             },\n             {\n                 \"Columns\": [\"count(*)\"],\n                 \"TableName\": \"Devices\",\n                 \"CustomName\": \"NoAction\",\n                 \"JoinTable\":\"Devices\",\n                 \"Filters\":[\n                     {\n                         \"Column\" : \"Devices.LocationId\", \n                         \"ParamName\" : \"Parent6\",  \n                         \"Value\": \"Locations.Id\",\n                         \"IsParentRelated\": true\n                     },\n                     {\n                         \"Column\" : \"State\", \n                         \"ParamName\" : \"State3\",  \n                         \"Value\": 2,\n                         \"IsParentRelated\": false\n                     },\n                 ]\n             },\n             \n         ],  \n         \"CustomColumnNames\":\n         [\n             {\n                 \"Index\":1,\n                 \"BindingName\": \"CardName\"\n             },\n             {\n                 \"Index\":2,\n                 \"BindingName\": \"CardAddress\"\n             },\n              \n         ],\n         \"Filters\" : filters // Filter options in case they are needed.\n     }];\n     \n     Database.readSubQuery(\"rodent\",\"Sites\",compoundQeury, function(packet)\t\t\t\t\t \n     {\t\n          \n          ClientEvents.publish(\"SetHeaders\", packet,false);\n         ClientEvents.publish(\"toggleCard\",selectedLevel,false);\n \n     }); \t\n }\n \n function LoadDevices(siteId,floor)\n {\n\t \n     var compoundQeury = [\n     {\n         \"TableName\" : \"Devices\", // Specify the primary table used to construct the join request\n          \"Columns\" :\n         [\n             \"Id\",\n             \"Status\", \n             \"BaitRate\",\n             \"Hours\",\n             \"State\",\n             \"SetTime\",\n             \"TriggerTime\", \n             \"Alert\",\n             \"CompanyProductId\",\n             \"SignalStatus\",\n             \"emptyBy\",\n\t\t\t \"DeviceName\",\n             \"SignalStrenght\",\n             \"UpdateTime\",\n             \"DeviceType\",\n             \"Sid\",\n             \"DeviceNumber\",\n             \"Address\",\n             \"Expiry\",\n             \"FoodDate\",\n             \"DeviceBattery\", \n             \"CommunicationError\",\n\t\t\t \"CalculatedWeight\",\n\t\t\t \"DeviceRange\",\n\t\t\t \"WeightConsumed\",\n\t\t\t \"RebaitRange\",\n\t\t\t \"EnteredWeight\",\n\t\t\t \"StationId\",\n \t\t\t \"Location\",\n\t\t\t \"PacketType\"\n\t\t\t\n\n\t\t\t \n         ], // Specify the list of columns to take from the reference table.\n         \"CustomColumnNames\":\n         [\n             {\n                 \"Index\":29,\n                 \"BindingName\": \"BaitTypeName\"\n             },\n             \n             \n         ],\n         \"Filters\" : // Filter options in case they are needed.\n         [\n             {\n                 \"Column\" : \"LocationId\", //Column that will be applied (don't include table name will be resolved if its contained within the reference table.\n                 \"ParamName\" : \"LocationId\", // Parameter name, must be unique and should not contain $ as its resolved by the mapper. \n                 \"Value\": siteId // Value that you want to pass for comparison (any object)\n             }\t\n         ],\n         \"JoinOn\": [\"CompanyProducts\",\"Locations\"],\n         \"CompoundTables\" : // List of tables that you want joined over the reference table (Takes in a List<CompoundTable> etc the current structure for a lever of inheritence.\n         [\n             {\n                 \"Columns\": [\"Name\"],\n                 \"TableName\": \"CompanyProducts\",\n                 \"JoinTable\":\"Devices\",\n             }  \n         ]  \n     }];\n     \n     \n     Database.readCompound(\"rodent\",\"Devices\",compoundQeury, function(packet)\t\t\t\t\t \n     {\t\n           debugger\n         ClientEvents.publish(\"loadChildren\", packet,false);\t\n         GetVisibleFilter();\n         ClientEvents.publish(\"changeVisibleCounter\",1,false);\n         ClientEvents.publish(\"view-pointer-changed\",1,false);\n     }); \t\n }\n \n \n \n \n function SetActiveFloorData(activeSource, floor){\n     var bindingData = [];\n     for(var item in activeSource)\n     {\n         var currentItem = activeSource[item];\n         if(currentItem[17] === floor)\n         {\n             bindingData.push(currentItem);\n         }\n     }\n     return bindingData;\n }\n \n \n //region Initialization Queries\n function LoadTresholds()\n {\n     var compoundQeury = [\n     {\n         \"TableName\" : \"Lookups\", // Specify the primary table used to construct the join request\n         \"Join\" : 1, // Join type 1 - Inner Join, 2 - Outer Join, 3 - Left join, 4 - Right Join.\n         \"Columns\" :\n         [\n             \"Key\",\n             \"Value\"\n         ],\n          \n     }];\n     Database.readComposite(\"rodent\",\"Lookups\", compoundQeury,  [\n         {\n             \"Column\": \"Key\",\n             \"Value\": \"thresholds\"\n         }\n     ], function(packet) {\n          ClientEvents.publish(\"loadTreshold\", packet,false);\n     });\n \n     \n  \n }\n \n  \n\n\n \n function LoadCompanyProducts()\n {\n    var companyIdQuery = [{\n        Sql: \"select c.Id, l.name from Locations as l join Sites as s on l.RelativeId = s.id join Customers as cu on s.RelativeId = cu.Id Join Branches as b on cu.RelativeId = b.Id join Companies as c on b.RelativeId = c.Id where l.Id = $LocationId\",\n        Data: [\n            {\n                Column: \"$LocationId\",\n                value: persistence.LocationId\n            } \n        ]\n    }];\n    Database.ReadRecordsParam(\"Rodent\",\"Locations\",companyIdQuery, function (packet){\n         debugger\n        var current;\n        for(var item in packet.value.data)\n        {\n            var current = packet.value.data[item];\n            \n        }\n\n        var compoundQeury = [\n            {\n                \"TableName\" : \"CompanyProducts\", // Specify the primary table used to construct the join request\n                \"Join\" : 1, // Join type 1 - Inner Join, 2 - Outer Join, 3 - Left join, 4 - Right Join.\n                \"Columns\" :\n                [\n                    \"Id\",\n                    \"Name\",\n                    \"Expiry\",\n                    \"LowerThreshold\",\n                    \"UpperThreshold\",\n                    \"WeightPerBlock\"\n                ],\n                 \"Filters\" : // Filter options in case they are needed.\n                [\n                    {\n                        \"Column\" : \"CompanyId\", //Column that will be applied (don't include table name will be resolved if its contained within the reference table.\n                        \"ParamName\" : \"CompanyId\", // Parameter name, must be unique and should not contain $ as its resolved by the mapper. \n                        \"Value\": current[0] // Value that you want to pass for comparison (any object)\n                    },\n                    {\n                        \"Column\" : \"Status\", //Column that will be applied (don't include table name will be resolved if its contained within the reference table.\n                        \"ParamName\" : \"Status\", // Parameter name, must be unique and should not contain $ as its resolved by the mapper. \n                        \"Value\": 1// Value that you want to pass for comparison (any object)\n                    }\n                ],\n            }];\n            Database.readCompound(\"rodent\",\"CompanyProducts\",compoundQeury, function(packet)\t\t\t\t\t \n            { \n                 \n                var current;\n                var outgoingSource = [];\n                for(var val in packet.value.data)\n                {\n                      \n                    current =  packet.value.data[val];\n                    outgoingSource.push({\n                        Id:current[0],\n                        Name:current[1],\n                        Expiry:current[2],\n                        LowerThreshold:current[3],\n                        UpperThreshold:current[4],\n                        WeightPerBlock:current[5]\n                    });\n                }\n                 ClientEvents.publish(\"baitTypes\",outgoingSource,false);\n            });\n     });\n     \t\n }\n  \n //end region\n \n  \n \n function GetParentName(id)\n {\n     var compoundQeury = [\n     {\n         \"TableName\" : \"Locations\", // Specify the primary table used to construct the join request\n         \"Join\" : 1, // Join type 1 - Inner Join, 2 - Outer Join, 3 - Left join, 4 - Right Join.\n         \"Columns\" :\n         [\n             \"Name\"\n         ],\n         \"Filters\":\n         [\n             {\n                 \"Column\" : \"Id\", //Column that will be applied (don't include table name will be resolved if its contained within the reference table.\n                 \"ParamName\" : \"Id\", // Parameter name, must be unique and should not contain $ as its resolved by the mapper. \n                 \"Value\": id // Value that you want to pass for comparison (any object)\n             }\n         ]// Specify the list of columns to take from the reference table.\n     }];\n     Database.readCompound(\"rodent\",\"Locations\",compoundQeury, function(packet)\t\t\t\t\t \n     { \n         \n         var current;\n         for(var val in packet.value.data)\n         {\n             current =  packet.value.data[val];\n         }\n         var command = \n         {\n             \"Action\":\"setVal\",\n             \"Compoent\":\"RightPanel\",\n             \"Value\": current[0],\n             \"Id\": \"PageName\",\n         };\n         _publishCommand(command, \"SetTopAction\");\t\n     });\t\n }\n \n \n function GetVisibleFilter()\n {\n     \n     activeFilter = Script.getState(\"changeVisibleCounterVal\");\n     if(activeFilter === null)\n     {\n         Script.setState(\"changeVisibleCounterVal\",1);\n         activeFilter =1;\n     } \n }\n\n\nClientEvents.subscribe(\"EventTransaction\", function(data) \n{ \n\tDatabase.readLastPrimaryKey(\"Rodent\",\"EventLogs\",function(eventData){\n\t\t \n\t\tvar lastId = parseInt(eventData.value);\n\t\tvar Id = lastId + 1;\n\t\tvar dbVal = {};\n\t    dbVal[Id] = {\n\t\t\t\"Id\": Id,\n\t\t\t\"DeviceId\": data.value.ID,\n\t\t\t\"EventTypeId\": data.value.EventType,\n\t\t\t\"CompanyProductId\": data.value.CompanyProductId,\n\t\t\t\"Value\": data.value.Value,\n\t\t\t\"CreatedOn\" : data.value.CreatedOn,\n\t\t\t\"CreatedBy\": data.value.CreatedBy,\n\t\t\t\"Owner\": data.value.Owner\n\t\t};\n\t\t// Update a record's values, Fails if the record does not exist.\n\t\tDatabase.saveRecordParam(\"Rodent\", \"EventLogs\", dbVal, function (data) {\n\n\t\t});\n\n\t\t\n\t});\n});\n\nClientEvents.subscribe(\"GenericActionMessage\", function(data) \n{ \n\t if(data ===\"GoBack|null\")\n    {\n\t\tScript.setState(\"ReturningFromDevices\", true, false);\n\t}\n\t  _handleGeneric(data);\n});",
          "file name": "DeviceLevelController"
        },
        "ev": {
          "serverEvents": {
            "inputEvents": {
              "New Event #1": {
                "channel": "$DB/ADMIN/MANAGE/RESPONSE",
                "event": "feed",
                "important": "false"
              }
            }
          }
        }
      },
      "PickSlider#0": {
        "t": "PickSlider",
        "lX": 500,
        "lY": 54,
        "sX": 6.02,
        "sY": 1,
        "s": "Device Level",
        "ps": {
          "enabled": true,
          "scalingType": "NOVERT",
          "width": "96% - 470px",
          "height": "4.13%",
          "x": "500px",
          "y": "4.46%"
        },
        "ver": "190104c210519",
        "dis": false,
        "tt": "",
        "a": {
          "tick values": "minute,hour,4 hour,8 hour,12 hour,day,week,month,year",
          "default value": "day"
        },
        "ev": {
          "clientEvents": {
            "outputEvents": {
              "Select": {
                "channel": "Select/receive value",
                "event": "changed",
                "trigger": "changed",
                "important": "false"
              }
            }
          }
        }
      },
      "Graph#0": {
        "t": "Graph",
        "lX": 490,
        "lY": 109,
        "sX": 5.93,
        "sY": 1.5,
        "s": "Device Level",
        "ps": {
          "enabled": true,
          "scalingType": "OK",
          "width": "95% - 470px",
          "height": "35.63%",
          "x": "490px",
          "y": "12.93%"
        },
        "ver": "190104c210519",
        "dis": false,
        "tt": "",
        "a": {
          "line type": "linear",
          "history timespan": "24",
          "title": "Tare Weight Packet 5",
          "enable zoom": "true",
          "domain max": "200",
          "domain min": "0"
        },
        "ev": {
          "clientEvents": {
            "inputEvents": {
              "Select": {
                "channel": "Select/set x axis interval",
                "event": "set x axis interval",
                "important": "false"
              },
              "devsel": {
                "channel": "devsel/set all instances",
                "event": "set all instances",
                "important": "false"
              }
            }
          },
          "serverEvents": {
            "inputEvents": {
              "TareWeight p5": {
                "channel": "PESTCO/RODENTS/-/TareWeight",
                "event": "history",
                "important": "false",
                "attribs": {
                  "color": "green",
                  "area fill": false,
                  "fill opacity": "0.2"
                }
              }
            }
          }
        }
      },
      "Graph#1": {
        "t": "Graph",
        "lX": 490,
        "lY": 404,
        "sX": 5.93,
        "sY": 1.1,
        "s": "Device Level",
        "ps": {
          "enabled": true,
          "scalingType": "OK",
          "width": "95% - 470px",
          "height": "26.13%",
          "x": "490px",
          "y": "48%"
        },
        "ver": "190104c210519",
        "z": "100",
        "dis": false,
        "tt": "",
        "a": {
          "line type": "linear",
          "history timespan": "24",
          "title": "Packet 3 OOB",
          "enable zoom": "true"
        },
        "ev": {
          "clientEvents": {
            "inputEvents": {
              "devsel": {
                "channel": "devsel/set all instances",
                "event": "set all instances",
                "important": "false"
              },
              "Select": {
                "channel": "Select/set x axis interval",
                "event": "set x axis interval",
                "important": "false"
              }
            }
          },
          "serverEvents": {
            "inputEvents": {
              "p3oob": {
                "channel": "PESTCO/RODENTS/-/p3oob",
                "event": "history",
                "important": "false",
                "attribs": {
                  "color": "green",
                  "area fill": false,
                  "fill opacity": "0.2"
                }
              }
            }
          }
        }
      },
      "Graph#3": {
        "t": "Graph",
        "lX": 490,
        "lY": 619,
        "sX": 5.93,
        "sY": 1.1,
        "s": "Device Level",
        "ps": {
          "enabled": true,
          "scalingType": "OK",
          "width": "95% - 470px",
          "height": "26.13%",
          "x": "490px",
          "y": "73.49%"
        },
        "ver": "190104c210519",
        "z": "100",
        "dis": false,
        "tt": "",
        "a": {
          "line type": "linear",
          "history timespan": "24",
          "title": "Packet Type",
          "enable zoom": "true"
        },
        "ev": {
          "clientEvents": {
            "inputEvents": {
              "devsel": {
                "channel": "devsel/set all instances",
                "event": "set all instances",
                "important": "false"
              },
              "Select": {
                "channel": "Select/set x axis interval",
                "event": "set x axis interval",
                "important": "false"
              }
            }
          },
          "serverEvents": {
            "inputEvents": {
              "PacketType": {
                "channel": "PESTCO/RODENTS/-/PacketType",
                "event": "history",
                "important": "false",
                "attribs": {
                  "color": "green",
                  "area fill": false,
                  "fill opacity": "0.2"
                }
              }
            }
          }
        }
      },
      "Label#40": {
        "t": "Label",
        "lX": 1550,
        "lY": 67,
        "sX": 1,
        "sY": 1,
        "s": "Device Level",
        "ps": {
          "enabled": true,
          "scalingType": "OK",
          "width": "5.74%",
          "height": "2.97%",
          "x": "89.79%",
          "y": "7.96%"
        },
        "ver": "200124c210519",
        "dis": false,
        "tt": "",
        "a": {
          "font size": "14",
          "label text": "<b style=\"font-size: large;\">Tilt&nbsp;</b><span style=\"font-size: large;\">&nbsp;[#]</span>"
        },
        "ev": {
          "clientEvents": {
            "inputEvents": {
              "devsel": {
                "channel": "devsel/channel0 instance",
                "event": "channel0 instance",
                "important": "false"
              }
            }
          },
          "serverEvents": {
            "inputEvents": {
              "TILT": {
                "channel": "PESTCO/RODENTS/=/TILT",
                "event": "feed",
                "important": "false"
              }
            }
          }
        }
      }
    },
    "screens": {
      "Manage Products": {
        "index": 0,
        "icon": "shopping_basket",
        "meta": ""
      },
      "Edit Product": {
        "index": 1,
        "icon": "edit",
        "meta": ""
      },
      "Manage Master Products": {
        "index": 2,
        "icon": "shopping_basket",
        "meta": ""
      },
      "User Roles": {
        "index": 3,
        "icon": "verified_user",
        "meta": ""
      },
      "Edit User Role": {
        "index": 4,
        "icon": "assignment_ind",
        "meta": ""
      },
      "Error Codes": {
        "index": 5,
        "icon": "error",
        "meta": ""
      },
      "Edit Error Codes": {
        "index": 6,
        "icon": "edit",
        "meta": ""
      },
      "Manage Companies": {
        "index": 7,
        "icon": "business",
        "meta": ""
      },
      "Edit Company": {
        "index": 8,
        "icon": "edit",
        "meta": ""
      },
      "Device Level": {
        "index": 9,
        "icon": "widgets",
        "meta": ""
      }
    },
    "meta": ""
  }